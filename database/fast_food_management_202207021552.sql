--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2/7/2022 3:52:23 PM
-- Server version: 8.0.28
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE fast_food_management;

--
-- Drop procedure `Proc_Action_Get`
--
DROP PROCEDURE IF EXISTS Proc_Action_Get;

--
-- Drop procedure `Proc_Comment_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Comment_Delete;

--
-- Drop procedure `Proc_Comment_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Comment_GetFilterPaging;

--
-- Drop procedure `Proc_Comment_Update`
--
DROP PROCEDURE IF EXISTS Proc_Comment_Update;

--
-- Drop procedure `Proc_Faq_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Faq_GetFilterPaging;

--
-- Drop procedure `Proc_FoodDetail_GetByFoodId`
--
DROP PROCEDURE IF EXISTS Proc_FoodDetail_GetByFoodId;

--
-- Drop procedure `Proc_Food_GetByCode`
--
DROP PROCEDURE IF EXISTS Proc_Food_GetByCode;

--
-- Drop procedure `Proc_Question_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Question_GetFilterPaging;

--
-- Drop procedure `Proc_RatingSheet_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_RatingSheet_GetFilterPaging;

--
-- Drop procedure `Proc_Size_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Size_GetFilterPaging;

--
-- Drop procedure `Proc_Topping_GetByListToppingId`
--
DROP PROCEDURE IF EXISTS Proc_Topping_GetByListToppingId;

--
-- Drop procedure `Proc_User_Login`
--
DROP PROCEDURE IF EXISTS Proc_User_Login;

--
-- Drop procedure `Proc_LayoutConfig_GetLayout`
--
DROP PROCEDURE IF EXISTS Proc_LayoutConfig_GetLayout;

--
-- Drop table `layoutconfig`
--
DROP TABLE IF EXISTS layoutconfig;

--
-- Drop table `answer`
--
DROP TABLE IF EXISTS answer;

--
-- Drop view `view_question`
--
DROP VIEW IF EXISTS view_question CASCADE;

--
-- Drop procedure `Proc_Question_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Question_Delete;

--
-- Drop procedure `Proc_Question_Post`
--
DROP PROCEDURE IF EXISTS Proc_Question_Post;

--
-- Drop procedure `Proc_Question_Update`
--
DROP PROCEDURE IF EXISTS Proc_Question_Update;

--
-- Drop table `question`
--
DROP TABLE IF EXISTS question;

--
-- Drop procedure `Proc_RatingSheet_Delete`
--
DROP PROCEDURE IF EXISTS Proc_RatingSheet_Delete;

--
-- Drop procedure `Proc_RatingSheet_Post`
--
DROP PROCEDURE IF EXISTS Proc_RatingSheet_Post;

--
-- Drop procedure `Proc_RatingSheet_Update`
--
DROP PROCEDURE IF EXISTS Proc_RatingSheet_Update;

--
-- Drop table `ratingsheet`
--
DROP TABLE IF EXISTS ratingsheet;

--
-- Drop procedure `Proc_Topping_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Topping_Delete;

--
-- Drop procedure `Proc_Topping_GetByFood`
--
DROP PROCEDURE IF EXISTS Proc_Topping_GetByFood;

--
-- Drop procedure `Proc_Topping_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Topping_GetFilterPaging;

--
-- Drop procedure `Proc_Topping_Post`
--
DROP PROCEDURE IF EXISTS Proc_Topping_Post;

--
-- Drop procedure `Proc_Topping_Update`
--
DROP PROCEDURE IF EXISTS Proc_Topping_Update;

--
-- Drop table `topping`
--
DROP TABLE IF EXISTS topping;

--
-- Drop procedure `Proc_User_By_UserName`
--
DROP PROCEDURE IF EXISTS Proc_User_By_UserName;

--
-- Drop procedure `Proc_User_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_User_GetFilterPaging;

--
-- Drop procedure `Proc_User_GetNewCode`
--
DROP PROCEDURE IF EXISTS Proc_User_GetNewCode;

--
-- Drop view `view_user`
--
DROP VIEW IF EXISTS view_user CASCADE;

--
-- Drop procedure `Proc_User_Post`
--
DROP PROCEDURE IF EXISTS Proc_User_Post;

--
-- Drop procedure `Proc_User_Update`
--
DROP PROCEDURE IF EXISTS Proc_User_Update;

--
-- Drop table `permission`
--
DROP TABLE IF EXISTS permission;

--
-- Drop procedure `Proc_AccessLog_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_AccessLog_GetFilterPaging;

--
-- Drop view `view_accesslog`
--
DROP VIEW IF EXISTS view_accesslog CASCADE;

--
-- Drop table `subject`
--
DROP TABLE IF EXISTS subject;

--
-- Drop table `action`
--
DROP TABLE IF EXISTS action;

--
-- Drop procedure `Proc_Discount_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Discount_GetFilterPaging;

--
-- Drop view `view_discount`
--
DROP VIEW IF EXISTS view_discount CASCADE;

--
-- Drop procedure `Proc_DiscountCondition_Delete`
--
DROP PROCEDURE IF EXISTS Proc_DiscountCondition_Delete;

--
-- Drop procedure `Proc_DiscountCondition_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_DiscountCondition_GetFilterPaging;

--
-- Drop procedure `Proc_DiscountCondition_Post`
--
DROP PROCEDURE IF EXISTS Proc_DiscountCondition_Post;

--
-- Drop procedure `Proc_DiscountCondition_Update`
--
DROP PROCEDURE IF EXISTS Proc_DiscountCondition_Update;

--
-- Drop table `discountcondition`
--
DROP TABLE IF EXISTS discountcondition;

--
-- Drop procedure `Proc_AccessLog_Delete`
--
DROP PROCEDURE IF EXISTS Proc_AccessLog_Delete;

--
-- Drop procedure `Proc_AccessLog_Post`
--
DROP PROCEDURE IF EXISTS Proc_AccessLog_Post;

--
-- Drop table `accesslog`
--
DROP TABLE IF EXISTS accesslog;

--
-- Drop procedure `Proc_Blog_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Blog_Delete;

--
-- Drop procedure `Proc_Blog_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Blog_GetFilterPaging;

--
-- Drop procedure `Proc_Blog_Post`
--
DROP PROCEDURE IF EXISTS Proc_Blog_Post;

--
-- Drop procedure `Proc_Blog_Update`
--
DROP PROCEDURE IF EXISTS Proc_Blog_Update;

--
-- Drop table `blog`
--
DROP TABLE IF EXISTS blog;

--
-- Drop procedure `Proc_CartDetail_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_CartDetail_GetFilterPaging;

--
-- Drop view `view_cartdetail`
--
DROP VIEW IF EXISTS view_cartdetail CASCADE;

--
-- Drop procedure `Proc_CartDetail_Delete`
--
DROP PROCEDURE IF EXISTS Proc_CartDetail_Delete;

--
-- Drop procedure `Proc_CartDetail_Post`
--
DROP PROCEDURE IF EXISTS Proc_CartDetail_Post;

--
-- Drop procedure `Proc_CartDetail_Update`
--
DROP PROCEDURE IF EXISTS Proc_CartDetail_Update;

--
-- Drop table `cartdetail`
--
DROP TABLE IF EXISTS cartdetail;

--
-- Drop view `view_comment`
--
DROP VIEW IF EXISTS view_comment CASCADE;

--
-- Drop table `comment`
--
DROP TABLE IF EXISTS comment;

--
-- Drop procedure `Proc_Contact_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Contact_GetFilterPaging;

--
-- Drop view `view_contact`
--
DROP VIEW IF EXISTS view_contact CASCADE;

--
-- Drop procedure `Proc_Contact_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Contact_Delete;

--
-- Drop procedure `Proc_Contact_Post`
--
DROP PROCEDURE IF EXISTS Proc_Contact_Post;

--
-- Drop procedure `Proc_Contact_Update`
--
DROP PROCEDURE IF EXISTS Proc_Contact_Update;

--
-- Drop table `contact`
--
DROP TABLE IF EXISTS contact;

--
-- Drop procedure `Proc_Faq_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Faq_Delete;

--
-- Drop procedure `Proc_Faq_Post`
--
DROP PROCEDURE IF EXISTS Proc_Faq_Post;

--
-- Drop procedure `Proc_Faq_Update`
--
DROP PROCEDURE IF EXISTS Proc_Faq_Update;

--
-- Drop table `faq`
--
DROP TABLE IF EXISTS faq;

--
-- Drop procedure `Proc_Favorite_GetByFoodAndUser`
--
DROP PROCEDURE IF EXISTS Proc_Favorite_GetByFoodAndUser;

--
-- Drop view `view_favorite`
--
DROP VIEW IF EXISTS view_favorite CASCADE;

--
-- Drop procedure `Proc_Favorite_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Favorite_Delete;

--
-- Drop procedure `Proc_Favorite_Post`
--
DROP PROCEDURE IF EXISTS Proc_Favorite_Post;

--
-- Drop procedure `Proc_Favorite_Update`
--
DROP PROCEDURE IF EXISTS Proc_Favorite_Update;

--
-- Drop table `favorite`
--
DROP TABLE IF EXISTS favorite;

--
-- Drop procedure `Proc_Order_GetByCode`
--
DROP PROCEDURE IF EXISTS Proc_Order_GetByCode;

--
-- Drop procedure `Proc_Order_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Order_GetFilterPaging;

--
-- Drop view `view_order`
--
DROP VIEW IF EXISTS view_order CASCADE;

--
-- Drop procedure `Proc_Comment_Post`
--
DROP PROCEDURE IF EXISTS Proc_Comment_Post;

--
-- Drop procedure `Proc_Order_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Order_Delete;

--
-- Drop procedure `Proc_Order_Post`
--
DROP PROCEDURE IF EXISTS Proc_Order_Post;

--
-- Drop procedure `Proc_Order_Update`
--
DROP PROCEDURE IF EXISTS Proc_Order_Update;

--
-- Drop procedure `Proc_Order_UpdateStatus`
--
DROP PROCEDURE IF EXISTS Proc_Order_UpdateStatus;

--
-- Drop table `order`
--
DROP TABLE IF EXISTS `order`;

--
-- Drop procedure `Proc_Slider_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Slider_Delete;

--
-- Drop procedure `Proc_Slider_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Slider_GetFilterPaging;

--
-- Drop procedure `Proc_Slider_Post`
--
DROP PROCEDURE IF EXISTS Proc_Slider_Post;

--
-- Drop procedure `Proc_Slider_Update`
--
DROP PROCEDURE IF EXISTS Proc_Slider_Update;

--
-- Drop table `slider`
--
DROP TABLE IF EXISTS slider;

--
-- Drop procedure `Proc_OrderDetail_GetByOrder`
--
DROP PROCEDURE IF EXISTS Proc_OrderDetail_GetByOrder;

--
-- Drop view `view_orderdetail`
--
DROP VIEW IF EXISTS view_orderdetail CASCADE;

--
-- Drop procedure `Proc_Food_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Food_GetFilterPaging;

--
-- Drop procedure `Proc_Food_PopularDish`
--
DROP PROCEDURE IF EXISTS Proc_Food_PopularDish;

--
-- Drop view `view_food`
--
DROP VIEW IF EXISTS view_food CASCADE;

--
-- Drop procedure `Proc_User_Delete`
--
DROP PROCEDURE IF EXISTS Proc_User_Delete;

--
-- Drop table `user`
--
DROP TABLE IF EXISTS user;

--
-- Drop procedure `Proc_Category_PopularDish`
--
DROP PROCEDURE IF EXISTS Proc_Category_PopularDish;

--
-- Drop procedure `Proc_OrderDetail_Post`
--
DROP PROCEDURE IF EXISTS Proc_OrderDetail_Post;

--
-- Drop table `orderdetail`
--
DROP TABLE IF EXISTS orderdetail;

--
-- Drop procedure `Proc_FoodDetail_GetByFood`
--
DROP PROCEDURE IF EXISTS Proc_FoodDetail_GetByFood;

--
-- Drop view `view_fooddetail`
--
DROP VIEW IF EXISTS view_fooddetail CASCADE;

--
-- Drop procedure `Proc_FoodDetail_Delete`
--
DROP PROCEDURE IF EXISTS Proc_FoodDetail_Delete;

--
-- Drop procedure `Proc_FoodDetail_Post`
--
DROP PROCEDURE IF EXISTS Proc_FoodDetail_Post;

--
-- Drop procedure `Proc_FoodDetail_Update`
--
DROP PROCEDURE IF EXISTS Proc_FoodDetail_Update;

--
-- Drop table `fooddetail`
--
DROP TABLE IF EXISTS fooddetail;

--
-- Drop procedure `Proc_Size_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Size_Delete;

--
-- Drop procedure `Proc_Size_Post`
--
DROP PROCEDURE IF EXISTS Proc_Size_Post;

--
-- Drop procedure `Proc_Size_Update`
--
DROP PROCEDURE IF EXISTS Proc_Size_Update;

--
-- Drop table `size`
--
DROP TABLE IF EXISTS size;

--
-- Drop procedure `Proc_Food_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Food_Delete;

--
-- Drop procedure `Proc_Food_Post`
--
DROP PROCEDURE IF EXISTS Proc_Food_Post;

--
-- Drop procedure `Proc_Food_Update`
--
DROP PROCEDURE IF EXISTS Proc_Food_Update;

--
-- Drop table `food`
--
DROP TABLE IF EXISTS food;

--
-- Drop procedure `Proc_Category_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Category_Delete;

--
-- Drop procedure `Proc_Category_GetFilterPaging`
--
DROP PROCEDURE IF EXISTS Proc_Category_GetFilterPaging;

--
-- Drop procedure `Proc_Category_Post`
--
DROP PROCEDURE IF EXISTS Proc_Category_Post;

--
-- Drop procedure `Proc_Category_Update`
--
DROP PROCEDURE IF EXISTS Proc_Category_Update;

--
-- Drop table `category`
--
DROP TABLE IF EXISTS category;

--
-- Drop procedure `Proc_Discount_Delete`
--
DROP PROCEDURE IF EXISTS Proc_Discount_Delete;

--
-- Drop procedure `Proc_Discount_Post`
--
DROP PROCEDURE IF EXISTS Proc_Discount_Post;

--
-- Drop procedure `Proc_Discount_Update`
--
DROP PROCEDURE IF EXISTS Proc_Discount_Update;

--
-- Drop table `discount`
--
DROP TABLE IF EXISTS discount;

--
-- Set default database
--
USE fast_food_management;

--
-- Create table `discount`
--
CREATE TABLE discount (
  DiscountId char(36) NOT NULL,
  DiscountCode varchar(20) NOT NULL,
  DiscountTitle text DEFAULT NULL,
  DiscountMaxAmount int DEFAULT NULL,
  DiscountAmount float DEFAULT NULL,
  DiscountStartDate datetime DEFAULT NULL,
  DiscountEndDate datetime DEFAULT NULL,
  DiscountConditionId char(36) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  DiscountType int DEFAULT 1 COMMENT '0-giảm giá trên món (của cửa hàng), 1-áp mã khuyến mãi',
  PRIMARY KEY (DiscountId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `FK_discount_DiscountConditionId` on table `discount`
--
ALTER TABLE discount
ADD INDEX FK_discount_DiscountConditionId (DiscountConditionId);

DELIMITER $$

--
-- Create procedure `Proc_Discount_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Discount_Update (IN $DiscountId char(36), IN $DiscountCode varchar(20), IN $DiscountTitle text, IN $DiscountMaxAmount int, IN $DiscountAmount float, IN $DiscountStartDate datetime, IN $DiscountEndDate datetime, IN $DiscountConditionId char(36), IN $CreatedDate datetime, IN $CreatedBy char(36), IN $ModifiedDate datetime, IN $ModifiedBy char(36), IN $DiscountType int)
BEGIN
  UPDATE discount
  SET DiscountCode = $DiscountCode -- DiscountCode - VARCHAR(20) NOT NULL
      ,
      DiscountTitle = $DiscountTitle -- DiscountTitle - TEXT
      ,
      DiscountMaxAmount = $DiscountMaxAmount -- DiscountMaxAmount - INT
      ,
      DiscountAmount = $DiscountAmount -- DiscountAmount - FLOAT
      ,
      DiscountStartDate = $DiscountStartDate -- DiscountStartDate - DATETIME
      ,
      DiscountEndDate = $DiscountEndDate -- DiscountEndDate - DATETIME
      ,
      DiscountConditionId = $DiscountConditionId -- DiscountConditionId - CHAR(36) 
      ,
      DiscountType = $DiscountType,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE DiscountId = $DiscountId -- DiscountId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Discount_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Discount_Post (IN DiscountId char(36), IN DiscountCode varchar(20), IN DiscountTitle text, IN DiscountMaxAmount int, IN DiscountAmount float, IN DiscountStartDate datetime, IN DiscountEndDate datetime, IN DiscountConditionId char(36), IN CreatedDate datetime, IN CreatedBy char(36), IN ModifiedDate datetime, IN ModifiedBy char(36), IN DiscountType int)
BEGIN
  INSERT INTO Discount (DiscountId
  , DiscountCode
  , DiscountTitle
  , DiscountMaxAmount
  , DiscountAmount
  , DiscountStartDate
  , DiscountEndDate
  , DiscountConditionId
  , DiscountType
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- DiscountId - CHAR(36) NOT NULL
    , DiscountCode -- DiscountCode - VARCHAR(20) NOT NULL
    , DiscountTitle -- DiscountTitle - TEXT
    , DiscountMaxAmount -- DiscountMaxAmount - INT
    , DiscountAmount -- DiscountAmount - FLOAT
    , DiscountStartDate -- DiscountStartDate - DATETIME
    , DiscountEndDate -- DiscountEndDate - DATETIME
    , DiscountConditionId -- DiscountConditionId - CHAR(36)
    , DiscountType, NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_Discount_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Discount_Delete (IN ListDiscountId text)
BEGIN
  DELETE
    FROM Discount
  WHERE FIND_IN_SET(DiscountId, ListDiscountId);
END
$$

DELIMITER ;

--
-- Create table `category`
--
CREATE TABLE category (
  CategoryId char(36) NOT NULL,
  CategoryCode varchar(20) NOT NULL,
  CategoryName text DEFAULT NULL,
  CategoryImage text DEFAULT NULL,
  Descriptions varchar(100) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  CategoryParent char(36) DEFAULT NULL,
  CategoryStatus varchar(255) DEFAULT NULL,
  PRIMARY KEY (CategoryId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_Category_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Category_Update (IN $CategoryId char(36)
, IN $CategoryCode varchar(20)
, IN $CategoryName text
, IN $CategoryImage text
, IN $CategoryParent char(36)
, IN $Descriptions varchar(100)
, IN $CategoryStatus int
, IN $CreatedDate datetime
, IN $CreatedBy char(36)
, IN $ModifiedDate datetime
, IN $ModifiedBy char(36))
BEGIN
  UPDATE category
  SET CategoryCode = $CategoryCode -- CategoryCode - VARCHAR(20) NOT NULL
      ,
      CategoryName = $CategoryName -- CategoryName - TEXT
      ,
      CategoryImage = $CategoryImage -- CategoryImage - TEXT
      ,
      CategoryParent = $CategoryParent -- CategoryParent - CHAR(36)
      ,
      Descriptions = $Descriptions -- Descriptions - VARCHAR(100)
      ,
      CategoryStatus = $CategoryStatus -- CategoryStatus - INT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE CategoryId = $CategoryId -- CategoryId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Category_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Category_Post (IN CategoryCode varchar(20), IN CategoryName text, IN CategoryImage text, IN Descriptions varchar(100), IN CreatedDate datetime, IN CreatedBy char(36), IN ModifiedDate datetime, IN ModifiedBy char(36))
BEGIN
  INSERT INTO category (CategoryId
  , CategoryCode
  , CategoryName
  , CategoryImage
  , Descriptions
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- CategoryId - CHAR(36) NOT NULL
    , CategoryCode -- CategoryCode - VARCHAR(20) NOT NULL
    , CategoryName -- CategoryName - TEXT
    , CategoryImage -- CategoryImage - TEXT
    , Descriptions -- Descriptions - VARCHAR(100)
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_Category_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Category_GetFilterPaging (IN CategoryFilter varchar(100), IN CategoryStatus int)
BEGIN
  SELECT
    vc.*
  FROM Category vc
    LEFT JOIN Category c
      ON vc.CategoryParent = c.CategoryId
  WHERE (((vc.CategoryStatus = CategoryStatus
  OR CategoryStatus IS NULL)
  AND (CategoryFilter IS NULL
  OR (INSTR(vc.CategoryCode, CategoryFilter) > 0)
  OR (INSTR(vc.CategoryName, CategoryFilter) > 0)))
  OR ((c.CategoryStatus = CategoryStatus
  OR CategoryStatus IS NULL)
  AND (CategoryFilter IS NULL
  OR (INSTR(c.CategoryCode, CategoryFilter) > 0)
  OR (INSTR(c.CategoryName, CategoryFilter) > 0)))
  )
  ORDER BY vc.CategoryCode, vc.CreatedDate DESC;
END
$$

--
-- Create procedure `Proc_Category_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Category_Delete (IN ListCategoryId text)
BEGIN
  DELETE
    FROM Category
  WHERE FIND_IN_SET(CategoryId, ListCategoryId);
END
$$

DELIMITER ;

--
-- Create table `food`
--
CREATE TABLE food (
  FoodId char(36) NOT NULL,
  CategoryId char(36) DEFAULT NULL,
  FoodName text NOT NULL,
  FoodCode varchar(20) NOT NULL,
  Descriptions longtext DEFAULT NULL,
  Title text DEFAULT NULL,
  FoodStatus int DEFAULT NULL,
  DiscountId char(36) DEFAULT NULL,
  FoodStar float DEFAULT 0,
  FoodView int DEFAULT NULL,
  ImageURL text DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  ListTopping text DEFAULT NULL,
  PRIMARY KEY (FoodId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE food
ADD CONSTRAINT food_ibfk_1 FOREIGN KEY (CategoryId)
REFERENCES category (CategoryId);

--
-- Create foreign key
--
ALTER TABLE food
ADD CONSTRAINT food_ibfk_2 FOREIGN KEY (DiscountId)
REFERENCES discount (DiscountId);

DELIMITER $$

--
-- Create procedure `Proc_Food_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Food_Update (IN $FoodId char(36), IN $CategoryId char(36), IN $ListTopping text, IN $FoodName text, IN $FoodCode varchar(20), IN $Descriptions longtext, IN $Title text, IN $FoodStatus int, IN $DiscountId char(36), IN $FoodStar float, IN $FoodView int, IN $ImageURL text, IN $CreatedDate datetime, IN $CreatedBy char(36), IN $ModifiedDate datetime, IN $ModifiedBy char(36))
BEGIN
  UPDATE food
  SET CategoryId = $CategoryId -- CategoryId - CHAR(36) NOT NULL
      ,
      ListTopping = $ListTopping -- ListToppingId - TEXt
      ,
      FoodName = $FoodName -- FoodName - TEXT NOT NULL
      ,
      FoodCode = $FoodCode -- FoodCode - VARCHAR(20) NOT NULL
      ,
      Descriptions = $Descriptions -- Descriptions - VARCHAR(100)
      ,
      Title = $Title -- Title - TEXT
      ,
      FoodStatus = $FoodStatus -- FoodStatus - INT
      ,
      DiscountId = $DiscountId -- DiscountId - CHAR(36)
      ,
      FoodStar = $FoodStar -- FoodStar - FLOAT
      ,
      FoodView = $FoodView -- FoodView - INT
      ,
      ImageURL = $ImageURL -- ImageURL - TEXT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE FoodId = $FoodId -- FoodId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Food_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Food_Post (FoodId char(36)
, CategoryId char(36)
, FoodName text
, FoodCode varchar(20)
, Descriptions longtext
, Title text
, FoodStatus int
, DiscountId char(36)
, FoodStar float
, FoodView int
, ImageURL text
, CreatedDate datetime
, CreatedBy char(36)
, ModifiedDate datetime
, ModifiedBy char(36)
, ListTopping text)
BEGIN
  INSERT INTO food (FoodId
  , CategoryId
  , FoodName
  , FoodCode
  , Descriptions
  , Title
  , FoodStatus
  , DiscountId
  , FoodStar
  , FoodView
  , ImageURL
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy
  , ListTopping)
    VALUES (FoodId -- FoodId - CHAR(36) NOT NULL
    , CategoryId -- CategoryId - CHAR(36) NOT NULL
    , FoodName -- FoodName - TEXT NOT NULL
    , FoodCode -- FoodCode - VARCHAR(20) NOT NULL
    , Descriptions -- Descriptions - VARCHAR(100)
    , Title -- Title - TEXT
    , FoodStatus -- FoodStatus - INT
    , DiscountId -- DiscountId - CHAR(36)
    , 0 -- FoodStar - FLOAT
    , 0 -- FoodView - INT
    , ImageURL -- ImageURL - TEXT
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    , ListTopping -- ListTopping - TEXT
    );
END
$$

--
-- Create procedure `Proc_Food_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Food_Delete (IN ListFoodId text)
BEGIN
  DELETE
    FROM Food
  WHERE FIND_IN_SET(FoodId, ListFoodId);
END
$$

DELIMITER ;

--
-- Create table `size`
--
CREATE TABLE size (
  SizeId char(36) NOT NULL,
  SizeName varchar(100) DEFAULT NULL,
  SizeStatus bit(1) DEFAULT NULL,
  SizeCode varchar(20) NOT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (SizeId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_Size_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Size_Update (IN $SizeId char(36),
IN $SizeCode varchar(20),
IN $SizeName varchar(100),
IN $SizeStatus bit(1),
IN $CreatedDate datetime,
IN $CreatedBy char(36),
IN $ModifiedDate datetime,
IN $ModifiedBy char(36))
BEGIN
  UPDATE Size
  SET SizeName = $SizeName -- SizeName - TEXT
      ,
      SizeCode = $SizeCode -- SizeCode - VARCHAR(20) NOT NULL
      ,
      SizeStatus = $SizeStatus,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE SizeId = $SizeId -- SizeId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Size_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Size_Post (IN SizeId char(36),
IN SizeCode varchar(20),
IN SizeName varchar(100),
IN SizeStatus bit(1),
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  INSERT INTO Size (SizeId
  , SizeName
  , SizeCode
  , SizeStatus
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID(), SizeName, SizeCode, SizeStatus, NOW(), CreatedBy, NOW(), ModifiedBy);
END
$$

--
-- Create procedure `Proc_Size_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Size_Delete (IN ListSizeId text)
BEGIN
  DELETE
    FROM Size
  WHERE FIND_IN_SET(SizeId, ListSizeId);
END
$$

DELIMITER ;

--
-- Create table `fooddetail`
--
CREATE TABLE fooddetail (
  FoodDetailId char(36) NOT NULL,
  FoodId char(36) NOT NULL,
  SizeId char(36) NOT NULL,
  FoodDetailStatus int DEFAULT NULL,
  Quantity int DEFAULT NULL,
  Amount int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (FoodDetailId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE fooddetail
ADD CONSTRAINT fooddetail_ibfk_1 FOREIGN KEY (FoodId)
REFERENCES food (FoodId) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE fooddetail
ADD CONSTRAINT fooddetail_ibfk_2 FOREIGN KEY (SizeId)
REFERENCES size (SizeId) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_FoodDetail_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_FoodDetail_Update (IN FoodDetailId char(36),
IN FoodId char(36),
IN SizeId char(36),
IN FoodDetailStatus int,
IN Quantity int,
IN Amount int,
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  UPDATE fooddetail fd
  SET fd.FoodId = FoodId -- FoodId - CHAR(36) NOT NULL
      ,
      fd.SizeId = SizeId -- SizeId - CHAR(36) NOT NULL
      ,
      fd.FoodDetailStatus = FoodDetailStatus -- FoodDetailStatus - INT
      ,
      fd.Quantity = Quantity -- Quantity - INT
      ,
      fd.Amount = Amount -- Amount - INT
      ,
      fd.ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      fd.ModifiedBy = ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE fd.FoodDetailId = FoodDetailId -- FoodDetailId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_FoodDetail_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_FoodDetail_Post (IN FoodDetailId char(36),
IN FoodId char(36),
IN SizeId char(36),
IN FoodDetailStatus int,
IN Quantity int,
IN Amount int,
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  INSERT INTO fooddetail (FoodDetailId
  , FoodId
  , SizeId
  , FoodDetailStatus
  , Quantity
  , Amount
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- FoodDetailId - CHAR(36) NOT NULL
    , FoodId -- FoodId - CHAR(36) NOT NULL
    , SizeId -- SizeId - CHAR(36) NOT NULL
    , FoodDetailStatus -- FoodDetailStatus - INT
    , Quantity -- Quantity - INT
    , Amount -- Amount - INT
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_FoodDetail_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_FoodDetail_Delete (IN $FoodId char(36))
BEGIN
  DELETE
    FROM FoodDetail
  WHERE FoodId = $FoodId;
END
$$

DELIMITER ;

--
-- Create view `view_fooddetail`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_fooddetail
AS
SELECT
  `fd`.`FoodDetailId` AS `FoodDetailId`,
  `fd`.`FoodId` AS `FoodId`,
  `fd`.`SizeId` AS `SizeId`,
  `fd`.`FoodDetailStatus` AS `FoodDetailStatus`,
  `fd`.`Quantity` AS `Quantity`,
  `fd`.`Amount` AS `Amount`,
  `fd`.`CreatedDate` AS `CreatedDate`,
  `fd`.`CreatedBy` AS `CreatedBy`,
  `fd`.`ModifiedDate` AS `ModifiedDate`,
  `fd`.`ModifiedBy` AS `ModifiedBy`,
  `f`.`FoodName` AS `FoodName`,
  `f`.`FoodCode` AS `FoodCode`,
  `f`.`Title` AS `Title`,
  `f`.`ImageURL` AS `ImageURL`,
  `s`.`SizeName` AS `SizeName`,
  `s`.`SizeCode` AS `SizeCode`
FROM ((`fooddetail` `fd`
  LEFT JOIN `food` `f`
    ON ((`fd`.`FoodId` = `f`.`FoodId`)))
  LEFT JOIN `size` `s`
    ON ((`fd`.`SizeId` = `s`.`SizeId`)));

DELIMITER $$

--
-- Create procedure `Proc_FoodDetail_GetByFood`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_FoodDetail_GetByFood (IN FoodId char(36))
BEGIN
  SELECT
    *
  FROM View_FoodDetail vfd
  ORDER BY vfd.CreatedDate;
END
$$

DELIMITER ;

--
-- Create table `orderdetail`
--
CREATE TABLE orderdetail (
  OrderDetailId char(36) NOT NULL,
  OrderId char(36) NOT NULL,
  FoodDetailId char(36) DEFAULT NULL,
  ListTopping text DEFAULT NULL,
  DiscountId char(36) DEFAULT NULL,
  Quantity int DEFAULT NULL,
  Amount int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  JsonData longtext DEFAULT NULL,
  PRIMARY KEY (OrderDetailId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1638,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
COMMENT = 'orderdetail_ibfk_2';

--
-- Create index `orderdetail_ibfk_1` on table `orderdetail`
--
ALTER TABLE orderdetail
ADD INDEX orderdetail_ibfk_1 (OrderId);

--
-- Create foreign key
--
ALTER TABLE orderdetail
ADD CONSTRAINT FK_orderdetail_FoodDetailId FOREIGN KEY (FoodDetailId)
REFERENCES fooddetail (FoodDetailId) ON DELETE SET NULL ON UPDATE SET NULL;

--
-- Create foreign key
--
ALTER TABLE orderdetail
ADD CONSTRAINT orderdetail_ibfk_3 FOREIGN KEY (DiscountId)
REFERENCES discount (DiscountId) ON DELETE SET NULL ON UPDATE SET NULL;

DELIMITER $$

--
-- Create procedure `Proc_OrderDetail_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_OrderDetail_Post (IN OrderId char(36), IN FoodDetailId char(36), IN ListTopping text, IN DiscountId char(36), IN Quantity int, IN Amount int, IN CreatedBy char(36), IN ModifiedBy char(36))
BEGIN
  INSERT INTO orderdetail (OrderDetailId
  , OrderId
  , FoodDetailId
  , ListTopping
  , DiscountId
  , Quantity
  , Amount
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- OrderDetailId - CHAR(36) NOT NULL
    , OrderId -- OrderId - CHAR(36) NOT NULL
    , FoodDetailId -- FoodDetailId - CHAR(36)
    , ListTopping -- ListTopping - TEXT
    , DiscountId -- DiscountId - CHAR(36)
    , Quantity -- Quantity - INT
    , Amount -- Amount - INT
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_Category_PopularDish`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Category_PopularDish ()
BEGIN
  SELECT
    c.*,
    COUNT(c.CategoryId) AS `NumOfOrder`
  FROM OrderDetail od
    LEFT JOIN View_FoodDetail vfd
      ON od.FoodDetailId = vfd.FoodDetailId
    LEFT JOIN Food f
      ON f.FoodId = vfd.FoodId
    RIGHT JOIN Category c
      ON f.CategoryId = c.CategoryId
  GROUP BY c.CategoryId
  ORDER BY `NumOfOrder` DESC, c.CreatedDate DESC LIMIT 0, 5;
END
$$

DELIMITER ;

--
-- Create table `user`
--
CREATE TABLE user (
  UserId char(36) NOT NULL,
  UserName varchar(100) NOT NULL DEFAULT '',
  UserCode varchar(20) DEFAULT NULL,
  Pass text NOT NULL,
  FullName varchar(100) DEFAULT NULL,
  Phone varchar(15) DEFAULT NULL,
  Address varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  Permission text DEFAULT NULL,
  Email varchar(50) DEFAULT NULL,
  Gender int DEFAULT NULL,
  IsAdmin bit(1) NOT NULL DEFAULT b'0',
  IsEmployee bit(1) NOT NULL DEFAULT b'0',
  Position text DEFAULT NULL,
  UserStatus int DEFAULT NULL,
  UserToken varchar(255) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (UserId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `UserName` on table `user`
--
ALTER TABLE user
ADD UNIQUE INDEX UserName (UserName);

DELIMITER $$

--
-- Create procedure `Proc_User_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_Delete (IN ListUserId text)
BEGIN
  DELETE
    FROM `User`
  WHERE FIND_IN_SET(UserId, ListUserId);
END
$$

DELIMITER ;

--
-- Create view `view_food`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_food
AS
SELECT
  `f`.`FoodId` AS `FoodId`,
  `f`.`CategoryId` AS `CategoryId`,
  `f`.`FoodName` AS `FoodName`,
  `f`.`FoodCode` AS `FoodCode`,
  `f`.`Descriptions` AS `Descriptions`,
  `f`.`FoodStatus` AS `FoodStatus`,
  `f`.`Title` AS `Title`,
  `f`.`ListTopping` AS `ListTopping`,
  `f`.`DiscountId` AS `DiscountId`,
  `f`.`FoodView` AS `FoodView`,
  `f`.`FoodStar` AS `FoodStar`,
  `f`.`ImageURL` AS `ImageURL`,
  `f`.`CreatedDate` AS `CreatedDate`,
  `f`.`CreatedBy` AS `CreatedBy`,
  `f`.`ModifiedDate` AS `ModifiedDate`,
  `f`.`ModifiedBy` AS `ModifiedBy`,
  `c`.`CategoryCode` AS `CategoryCode`,
  `c`.`CategoryName` AS `CategoryName`,
  `u`.`UserName` AS `UserName`,
  `u`.`UserCode` AS `UserCode`,
  `u`.`FullName` AS `FullName`,
  `s`.`SizeName` AS `SizeName`,
  `s`.`SizeCode` AS `SizeCode`,
  `d`.`DiscountCode` AS `DiscountCode`,
  `d`.`DiscountTitle` AS `DiscountTitle`,
  `d`.`DiscountAmount` AS `DiscountAmount`,
  `d`.`DiscountMaxAmount` AS `DiscountMaxAmount`,
  `d`.`DiscountStartDate` AS `DiscountStartDate`,
  `d`.`DiscountEndDate` AS `DiscountEndDate`,
  `fd`.`Amount` AS `Amount`
FROM (((((`food` `f`
  LEFT JOIN `category` `c`
    ON ((`f`.`CategoryId` = `c`.`CategoryId`)))
  LEFT JOIN `user` `u`
    ON ((`f`.`CreatedBy` = `u`.`UserId`)))
  LEFT JOIN `fooddetail` `fd`
    ON ((`f`.`FoodId` = `fd`.`FoodId`)))
  LEFT JOIN `size` `s`
    ON ((`s`.`SizeId` = `fd`.`SizeId`)))
  LEFT JOIN `discount` `d`
    ON ((`f`.`DiscountId` = `d`.`DiscountId`)))
GROUP BY `f`.`FoodId`;

DELIMITER $$

--
-- Create procedure `Proc_Food_PopularDish`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Food_PopularDish (IN CategoryId char(36))
BEGIN
  SELECT
    vfd.*,
    COUNT(vfd.FoodId) AS `NumOfOrder`,
    f.DiscountId,
    f.DiscountCode,
    f.DiscountAmount,
    f.DiscountMaxAmount,
    f.DiscountStartDate,
    f.DiscountEndDate
  FROM OrderDetail od
    LEFT JOIN View_FoodDetail vfd
      ON od.FoodDetailId = vfd.FoodDetailId
    LEFT JOIN view_food f
      ON f.FoodId = vfd.FoodId
    LEFT JOIN Category c
      ON f.CategoryId = c.CategoryId
  -- LEFT JOIN OrderDetail od  
  WHERE c.CategoryId = CategoryId
  GROUP BY vfd.FoodId
  ORDER BY `NumOfOrder` DESC LIMIT 0, 8;
END
$$

--
-- Create procedure `Proc_Food_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Food_GetFilterPaging (IN FoodFilter text, IN CategoryId char(36),
IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM View_Food vf
    ORDER BY vf.CreatedDate;
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM View_Food vf);
      CREATE TEMPORARY TABLE FilterFood (SELECT
          *
        FROM View_Food vf
        WHERE ((FoodFilter IS NULL
        OR INSTR(vf.FoodName, FoodFilter) > 0
        OR INSTR(vf.FoodCode, FoodFilter) > 0
        OR INSTR(vf.UserName, FoodFilter) > 0
        OR INSTR(vf.UserCode, FoodFilter) > 0)
        AND (CategoryId IS NULL
        OR vf.CategoryId = CategoryId)));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterFood);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterFood ff
      ORDER BY ff.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterFood;
    ELSE
      SELECT
        'Không có d? li?u phù h?p';
    END IF;
  END IF;
END
$$

DELIMITER ;

--
-- Create view `view_orderdetail`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_orderdetail
AS
SELECT
  `od`.`OrderDetailId` AS `OrderDetailId`,
  `od`.`OrderId` AS `OrderId`,
  `od`.`FoodDetailId` AS `FoodDetailId`,
  `od`.`DiscountId` AS `DiscountId`,
  `od`.`Quantity` AS `Quantity`,
  `od`.`Amount` AS `Amount`,
  `od`.`CreatedDate` AS `CreatedDate`,
  `od`.`CreatedBy` AS `CreatedBy`,
  `od`.`ModifiedDate` AS `ModifiedDate`,
  `od`.`ModifiedBy` AS `ModifiedBy`,
  `od`.`ListTopping` AS `ListTopping`,
  `od`.`JsonData` AS `JsonData`,
  `f`.`FoodName` AS `FoodName`,
  `f`.`FoodCode` AS `FoodCode`,
  `f`.`ImageURL` AS `ImageURL`,
  `fd`.`Amount` AS `UnitPrice`,
  `s`.`SizeName` AS `SizeName`,
  `s`.`SizeCode` AS `SizeCode`,
  `d`.`DiscountCode` AS `DiscountCode`,
  `d`.`DiscountStartDate` AS `DiscountStartDate`,
  `d`.`DiscountEndDate` AS `DiscountEndDate`,
  `d`.`DiscountAmount` AS `DiscountAmount`,
  `d`.`DiscountMaxAmount` AS `DiscountMaxAmount`,
  `f`.`DiscountCode` AS `FoodDiscountCode`,
  `f`.`DiscountStartDate` AS `FoodDiscountStartDate`,
  `f`.`DiscountEndDate` AS `FoodDiscountEndDate`,
  `f`.`DiscountAmount` AS `FoodDiscountAmount`,
  `f`.`DiscountMaxAmount` AS `FoodDiscountMaxAmount`
FROM ((((`orderdetail` `od`
  LEFT JOIN `fooddetail` `fd`
    ON ((`od`.`FoodDetailId` = `fd`.`FoodDetailId`)))
  LEFT JOIN `view_food` `f`
    ON ((`fd`.`FoodId` = `f`.`FoodId`)))
  LEFT JOIN `size` `s`
    ON ((`fd`.`SizeId` = `s`.`SizeId`)))
  LEFT JOIN `discount` `d`
    ON ((`od`.`DiscountId` = `d`.`DiscountId`)));

DELIMITER $$

--
-- Create procedure `Proc_OrderDetail_GetByOrder`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_OrderDetail_GetByOrder (IN OrderId char(36))
BEGIN
  SELECT
    *
  FROM View_OrderDetail vod
  WHERE vod.OrderId = OrderId;
END
$$

DELIMITER ;

--
-- Create table `slider`
--
CREATE TABLE slider (
  SliderId char(36) NOT NULL,
  SliderImage text DEFAULT NULL,
  SliderLink text DEFAULT NULL,
  SliderStatus bit(1) DEFAULT NULL,
  SliderContent text DEFAULT NULL,
  SliderTitle text DEFAULT NULL,
  SliderName text DEFAULT NULL,
  SliderCode varchar(20) NOT NULL DEFAULT '',
  Priority int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (SliderId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE slider
ADD CONSTRAINT FK_Slider_CreatedBy FOREIGN KEY (CreatedBy)
REFERENCES user (UserId) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_Slider_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Slider_Update (IN $SliderId char(36)
, IN $SliderCode varchar(20)
, IN $SliderImage text
, IN $SliderName text
, IN $SliderLink text
, IN $SliderStatus bit(1)
, IN $SliderContent text
, IN $SliderTitle text
, IN $Priority int
, IN $CreatedDate datetime
, IN $CreatedBy char(36)
, IN $ModifiedDate datetime
, IN $ModifiedBy char(36))
BEGIN
  UPDATE Slider
  SET SliderImage = $SliderImage -- SliderImage - TEXT
      ,
      SliderLink = $SliderLink -- SliderLink - TEXT
      ,
      SliderStatus = $SliderStatus -- SliderStatus - BIT(1)
      ,
      SliderContent = $SliderContent -- SliderContent - TEXT
      ,
      SliderTitle = $SliderTitle -- SliderTitle - TEXT
      ,
      SliderName = $SliderName -- SliderName - TEXT
      ,
      SliderCode = $SliderCode -- SliderCode - VARCHAR(20) NOT NULL
      ,
      Priority = $Priority -- Priority - INT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE SliderId = $SliderId -- SliderId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Slider_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Slider_Post (IN SliderId char(36)
, IN SliderCode varchar(20)
, IN SliderImage text
, IN SliderName text
, IN SliderLink text
, IN SliderStatus bit(1)
, IN SliderContent text
, IN SliderTitle text
, IN Priority int
, IN CreatedDate datetime
, IN CreatedBy char(36)
, IN ModifiedDate datetime
, IN ModifiedBy char(36))
BEGIN
  INSERT INTO Slider (SliderId
  , SliderImage
  , SliderLink
  , SliderStatus
  , SliderContent
  , SliderTitle
  , SliderName
  , SliderCode
  , Priority
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- SliderId - CHAR(36) NOT NULL
    , SliderImage -- SliderImage - TEXT
    , SliderLink -- SliderLink - TEXT
    , SliderStatus -- SliderStatus - BIT(1)
    , SliderContent -- SliderContent - TEXT
    , SliderTitle -- SliderTitle - TEXT
    , SliderName -- SliderName - TEXT
    , SliderCode -- SliderCode - VARCHAR(20) NOT NULL
    , Priority -- Priority - INT
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_Slider_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Slider_GetFilterPaging (IN SliderFilter text,
IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM Slider t
    ORDER BY t.CreatedDate;
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM Slider t);
      CREATE TEMPORARY TABLE FilterSlider (SELECT
          *
        FROM Slider t
        WHERE ((SliderFilter IS NULL
        OR INSTR(t.SliderTitle, SliderFilter) > 0
        OR INSTR(t.SliderName, SliderFilter) > 0
        OR INSTR(t.SliderCode, SliderFilter) > 0)));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterSlider);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterSlider fp
      ORDER BY fp.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterSlider;
    ELSE
      SELECT
        'Không có d? li?u phù h?p';
    END IF;
  END IF;
END
$$

--
-- Create procedure `Proc_Slider_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Slider_Delete (IN ListSliderId text)
BEGIN
  DELETE
    FROM Slider
  WHERE FIND_IN_SET(SliderId, ListSliderId);
END
$$

DELIMITER ;

--
-- Create table `order`
--
CREATE TABLE `order` (
  OrderId char(36) NOT NULL,
  OrderCode varchar(20) NOT NULL,
  OrderName char(10) DEFAULT NULL,
  TotalAmount int DEFAULT NULL,
  UserId char(36) NOT NULL,
  Address text NOT NULL,
  Phone varchar(20) NOT NULL,
  OrderStatus int DEFAULT NULL COMMENT '0 - Processing, 2 - Accept, 1 - Reject, 3 - WaitingToTake, 4 - Delivering, 5 - Complete',
  OrderReason text DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  IsRated int DEFAULT 0,
  PRIMARY KEY (OrderId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE `order`
ADD CONSTRAINT order_ibfk_1 FOREIGN KEY (UserId)
REFERENCES user (UserId);

DELIMITER $$

--
-- Create procedure `Proc_Order_UpdateStatus`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Order_UpdateStatus (IN OrderStatus int, IN OrderId char(36), IN OrderReason text)
BEGIN
  UPDATE `order` od
  SET od.OrderStatus = OrderStatus,
      od.OrderReason = OrderReason
  WHERE od.OrderId = OrderId;
END
$$

--
-- Create procedure `Proc_Order_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Order_Update (IN $OrderId char(36), IN $OrderCode varchar(20), IN $OrderName char(10), IN $TotalAmount int, IN $UserId char(36), IN $Address text, IN $Phone varchar(20), IN $OrderStatus int, IN $OrderReason text, IN $CreatedDate datetime, IN $CreatedBy char(36), IN $ModifiedDate datetime, IN $ModifiedBy char(36), IN $IsRated int)
BEGIN
  UPDATE `order`
  SET OrderCode = $OrderCode -- OrderCode - VARCHAR(20) NOT NULL
      ,
      OrderName = $OrderName -- OrderName - CHAR(10)
      ,
      TotalAmount = $TotalAmount -- TotalAmount - INT
      ,
      UserId = $UserId -- UserId - CHAR(36) NOT NULL
      ,
      Address = $Address -- Address - TEXT NOT NULL
      ,
      Phone = $Phone -- Phone - VARCHAR(20) NOT NULL
      ,
      OrderStatus = $OrderStatus -- OrderStatus - INT
      ,
      OrderReason = $OrderReason -- OrderReason - TEXT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
      ,
      IsRated = $IsRated
  WHERE OrderId = $OrderId -- OrderId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Order_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Order_Post (IN OrderId char(36), IN OrderCode varchar(20), IN OrderName char(10), IN TotalAmount int, IN UserId char(36), IN Address text, IN Phone varchar(20), IN OrderStatus int, IN OrderReason text, IN CreatedDate datetime, IN CreatedBy char(36), IN ModifiedDate datetime, IN ModifiedBy char(36), IN IsRated int)
BEGIN
  -- DECLARE i INT DEFAULT 0;
  -- How long JSON array is                                                                                                                                                             
  -- DECLARE e INT DEFAULT JSON_LENGTH(ListOrderDetail);
  INSERT INTO `order` (OrderId, OrderCode, OrderName, TotalAmount, UserId, Address, Phone, OrderStatus, OrderReason, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, IsRated)
    VALUES (OrderId, OrderCode, OrderName, TotalAmount, UserId, Address, Phone, OrderStatus, OrderReason, NOW(), CreatedBy, NOW(), ModifiedBy, IsRated);

--     WHILE i < e DO
--         -- Get the values at array offset `i` and insert them into the table                                                                                                                  
--         INSERT INTO OrderDetail (OrderDetailId, OrderId, FoodDetailId, ToppingId, DiscountId, Quantity, Amount, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy)
--         VALUES (UUID(), OrderId, JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].FoodDetailId')), JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].ToppingId')), JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].DiscountId')), JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].Quantity')),
--         JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].Amount')), NOW(), JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].CreatedBy')), NOW(), JSON_EXTRACT(ListOrderDetail, CONCAT('$[', i, '].ModifiedBy')));
--         -- Increment the loop variable                                                                                                                                                        
--         SET i = i + 1;
--     END WHILE;
END
$$

--
-- Create procedure `Proc_Order_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Order_Delete (IN ListOrderId text)
BEGIN
  DELETE
    FROM `Order`
  WHERE FIND_IN_SET(OrderId, ListOrderId);
END
$$

--
-- Create procedure `Proc_Comment_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Comment_Post (IN UserId char(36), IN FoodId char(36), IN CommentContent text, IN CommentStatus bit, IN CommentStar int, IN CreatedDate datetime, IN CreatedBy char(36), IN ModifiedDate datetime, IN ModifiedBy char(36), IN OrderId char(36), IN FoodCode varchar(20), IN UserName varchar(100))
BEGIN
  INSERT INTO comment (CommentId
  , UserId
  , FoodId
  , CommentContent
  , CommentStatus
  , CommentStar
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy
  , OrderId
  , FoodCode
  , UserName)
    VALUES (UUID(), UserId, FoodId, CommentContent, CommentStatus, CommentStar, NOW(), CreatedBy, NOW(), ModifiedBy, OrderId, FoodCode, UserName);
  UPDATE `order` o
  SET o.IsRated = 1
  WHERE o.OrderId = OrderId;
END
$$

DELIMITER ;

--
-- Create view `view_order`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_order
AS
SELECT
  `o`.`OrderId` AS `OrderId`,
  `o`.`OrderCode` AS `OrderCode`,
  `o`.`OrderName` AS `OrderName`,
  `o`.`TotalAmount` AS `TotalAmount`,
  `o`.`UserId` AS `UserId`,
  `o`.`Address` AS `Address`,
  `o`.`Phone` AS `Phone`,
  `o`.`OrderStatus` AS `OrderStatus`,
  `o`.`OrderReason` AS `OrderReason`,
  `o`.`IsRated` AS `IsRated`,
  `o`.`CreatedDate` AS `CreatedDate`,
  `o`.`CreatedBy` AS `CreatedBy`,
  `o`.`ModifiedDate` AS `ModifiedDate`,
  `o`.`ModifiedBy` AS `ModifiedBy`,
  `u`.`UserName` AS `UserName`,
  `u`.`UserCode` AS `UserCode`
FROM (`order` `o`
  LEFT JOIN `user` `u`
    ON ((`o`.`UserId` = `u`.`UserId`)));

DELIMITER $$

--
-- Create procedure `Proc_Order_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Order_GetFilterPaging (IN ListUserName text, IN OrderFilter text, IN OrderStatus text, IN CreatedDateMin datetime, IN CreatedDateMax datetime, IN PageNumber int, IN PageSize int, OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM View_Order vo
    WHERE ((OrderFilter IS NULL
    OR OrderFilter = ''
    OR INSTR(vo.OrderName, OrderFilter) > 0
    OR INSTR(vo.OrderCode, OrderFilter) > 0)
    AND (CreatedDateMin IS NULL
    OR (CreatedDateMin <= vo.CreatedDate
    AND vo.CreatedDate <= CreatedDateMax))
    AND (OrderStatus IS NULL
    OR OrderStatus = -1
    OR FIND_IN_SET(vo.OrderStatus, OrderStatus))
    AND (ListUserName IS NULL
    OR FIND_IN_SET(vo.UserName, ListUserName)));
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM View_Order vo);
      CREATE TEMPORARY TABLE FilterOrder (SELECT
          *
        FROM View_Order vo
        WHERE ((OrderFilter IS NULL
        OR INSTR(vo.OrderName, OrderFilter) > 0
        OR INSTR(vo.OrderCode, OrderFilter) > 0)
        AND (CreatedDateMin IS NULL
        OR (CreatedDateMin <= vo.CreatedDate
        AND vo.CreatedDate <= CreatedDateMax))
        AND (OrderStatus IS NULL
        OR FIND_IN_SET(vo.OrderStatus, OrderStatus))
        AND (ListUserName IS NULL
        OR FIND_IN_SET(vo.UserName, ListUserName))));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterOrder);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterOrder fo
      ORDER BY fo.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterOrder;
    ELSE
      SELECT
        'Không có d? li?u phù h?p';
    END IF;
  END IF;
END
$$

--
-- Create procedure `Proc_Order_GetByCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Order_GetByCode (IN $OrderCode varchar(20))
BEGIN
  SELECT
    *
  FROM view_order vo
  WHERE vo.OrderCode = $OrderCode LIMIT 0, 1;
END
$$

DELIMITER ;

--
-- Create table `favorite`
--
CREATE TABLE favorite (
  FavoriteId char(36) NOT NULL,
  UserId char(36) NOT NULL DEFAULT '''''',
  FoodId char(36) NOT NULL DEFAULT '''''',
  PRIMARY KEY (FavoriteId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE favorite
ADD CONSTRAINT favorite_ibfk_1 FOREIGN KEY (UserId)
REFERENCES user (UserId);

--
-- Create foreign key
--
ALTER TABLE favorite
ADD CONSTRAINT favorite_ibfk_2 FOREIGN KEY (FoodId)
REFERENCES food (FoodId);

DELIMITER $$

--
-- Create procedure `Proc_Favorite_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Favorite_Update (IN $FavoriteId char(36),
IN $UserId char(36),
IN $FoodId char(36),
IN $CreatedDate datetime,
IN $CreatedBy char(36),
IN $ModifiedDate datetime,
IN $ModifiedBy char(36))
BEGIN
  UPDATE Favorite
  SET UserId = $UserId -- UserId - char(36)
      ,
      FoodId = $FoodId -- FoodId - CHAR(36)
  WHERE FavoriteId = $FavoriteId -- FaqId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Favorite_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Favorite_Post (IN FavoriteId char(36),
IN UserId char(36),
IN FoodId char(36),
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  INSERT INTO Favorite (FavoriteId,
  UserId,
  FoodId)
    VALUES (UUID(), UserId, FoodId);
END
$$

--
-- Create procedure `Proc_Favorite_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Favorite_Delete (IN ListUserId text, IN ListFoodId text)
BEGIN
  DELETE
    FROM Favorite
  WHERE FIND_IN_SET(UserId, ListUserId)
    AND FIND_IN_SET(FoodId, ListFoodId);
END
$$

DELIMITER ;

--
-- Create view `view_favorite`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_favorite
AS
SELECT
  `f`.`FavoriteId` AS `FavoriteId`,
  `f`.`UserId` AS `UserId`,
  `f`.`FoodId` AS `FoodId`,
  `f1`.`FoodName` AS `FoodName`,
  `f1`.`FoodCode` AS `FoodCode`,
  `c`.`CategoryId` AS `CategoryId`,
  `c`.`CategoryCode` AS `CategoryCode`,
  `c`.`CategoryName` AS `CategoryName`,
  `u`.`UserName` AS `UserName`,
  `u`.`UserCode` AS `UserCode`
FROM (((`favorite` `f`
  LEFT JOIN `food` `f1`
    ON ((`f`.`FoodId` = `f1`.`FoodId`)))
  LEFT JOIN `user` `u`
    ON ((`f`.`UserId` = `u`.`UserId`)))
  LEFT JOIN `category` `c`
    ON ((`f1`.`CategoryId` = `c`.`CategoryId`)));

DELIMITER $$

--
-- Create procedure `Proc_Favorite_GetByFoodAndUser`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Favorite_GetByFoodAndUser (IN ListFoodId text, IN ListUserId text, IN FavoriteFilter text,
IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber > 0 THEN
    SET allRecord = (SELECT
        COUNT(*)
      FROM View_Favorite vf);
    CREATE TEMPORARY TABLE FilterFavorite (SELECT
        *
      FROM View_Favorite vf
      WHERE ((ListFoodId IS NULL
      OR (FIND_IN_SET(vf.FoodId, ListFoodId)))
      AND (ListUserId IS NULL
      OR (FIND_IN_SET(vf.UserId, ListUserId)))
      AND (INSTR(vf.FoodName, FavoriteFilter) > 0
      OR INSTR(vf.FoodCode, FavoriteFilter) > 0
      OR INSTR(vf.UserName, FavoriteFilter) > 0
      OR INSTR(vf.UserCode, FavoriteFilter) > 0)
      ));
    SET TotalRecord = (SELECT
        COUNT(*)
      FROM FilterFavorite);
    SET $row = (PageNumber - 1) * PageSize;
    SET recordLastPage = allRecord % PageSize;
    IF recordLastPage > 0 THEN
      SET TotalPage = FLOOR(allRecord / PageSize) + 1;
      IF PageNumber < TotalPage THEN
        SET recordsPerPage = PageSize;
      ELSE
        SET recordsPerPage = recordLastPage;
      END IF;
    ELSE
      SET TotalPage = allRecord / PageSize;
      SET recordsPerPage = PageSize;
    END IF;
    SELECT
      *
    FROM FilterFavorite ff
    ORDER BY ff.CreatedDate DESC LIMIT $row, recordsPerPage;
    DROP TABLE FilterFavorite;
  ELSE
    SELECT
      'Không có d? li?u phù h?p';
  END IF;
END
$$

DELIMITER ;

--
-- Create table `faq`
--
CREATE TABLE faq (
  FaqId char(36) NOT NULL,
  FaqName text DEFAULT NULL,
  FaqCode varchar(20) NOT NULL,
  FaqQuestion text DEFAULT NULL,
  FaqAnswer text DEFAULT NULL,
  Priority int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (FaqId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1820,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE faq
ADD CONSTRAINT FK_Faq_CreatedBy FOREIGN KEY (CreatedBy)
REFERENCES user (UserId) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_Faq_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Faq_Update (IN $FaqId char(36),
IN $FaqCode varchar(20),
IN $FaqName text,
IN $FaqQuestion text,
IN $FaqAnswer text,
IN $Priority int,
IN $CreatedDate datetime,
IN $CreatedBy char(36),
IN $ModifiedDate datetime,
IN $ModifiedBy char(36))
BEGIN
  UPDATE faq
  SET FaqName = $FaqName -- FaqName - TEXT
      ,
      FaqCode = $FaqCode -- FaqCode - VARCHAR(20) NOT NULL
      ,
      FaqQuestion = $FaqQuestion -- FaqQuestion - TEXT
      ,
      FaqAnswer = $FaqAnswer -- FaqAnswer - TEXT
      ,
      Priority = $Priority -- Priority - INT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE FaqId = $FaqId -- FaqId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Faq_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Faq_Post (IN FaqId char(36),
IN FaqCode varchar(20),
IN FaqName text,
IN FaqQuestion text,
IN FaqAnswer text,
IN Priority int,
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  INSERT INTO faq (FaqId
  , FaqName
  , FaqCode
  , FaqQuestion
  , FaqAnswer
  , Priority
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID(), FaqName, FaqCode, FaqQuestion, FaqAnswer, Priority, NOW(), CreatedBy, NOW(), ModifiedBy);
END
$$

--
-- Create procedure `Proc_Faq_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Faq_Delete (IN ListFaqId text)
BEGIN
  DELETE
    FROM Faq
  WHERE FIND_IN_SET(FaqId, ListFaqId);
END
$$

DELIMITER ;

--
-- Create table `contact`
--
CREATE TABLE contact (
  ContactId char(36) NOT NULL,
  UserId char(36) DEFAULT NULL,
  ContactTitle text DEFAULT NULL,
  ContactContent text DEFAULT NULL,
  ContactToEmail varchar(100) DEFAULT NULL,
  ContactStatus int DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  PRIMARY KEY (ContactId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE contact
ADD CONSTRAINT contact_ibfk_1 FOREIGN KEY (UserId)
REFERENCES user (UserId);

DELIMITER $$

--
-- Create procedure `Proc_Contact_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Contact_Update (IN $ContactId char(36)
, IN $UserId char(36)
, IN $ContactTitle text
, IN $ContactContent text
, IN $ContactToEmail varchar(100)
, IN $ContactStatus int
, IN $CreatedDate datetime
, IN $CreatedBy char(36)
, IN $ModifiedDate datetime
, IN $ModifiedBy char(36))
BEGIN
  UPDATE Contact
  SET UserId = $UserId,
      ContactTitle = $ContactTitle,
      ContactContent = $ContactContent,
      ContactToEmail = $ContactToEmail,
      ContactStatus = $ContactStatus
  WHERE ContactId = $ContactId -- ContactId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Contact_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Contact_Post (IN ContactId char(36)
, IN UserId char(36)
, IN ContactTitle text
, IN ContactContent text
, IN ContactToEmail varchar(100)
, IN ContactStatus int
, IN CreatedDate datetime
, IN CreatedBy char(36)
, IN ModifiedDate datetime
, IN ModifiedBy char(36))
BEGIN
  INSERT INTO Contact (ContactId
  , UserId
  , ContactTitle
  , ContactContent
  , ContactToEmail
  , ContactStatus
  , CreatedDate)
    VALUES (UUID(), UserId, ContactToEmail, ContactContent, ContactToEmail, ContactStatus, NOW());
END
$$

--
-- Create procedure `Proc_Contact_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Contact_Delete (IN ListContactId text)
BEGIN
  DELETE
    FROM Contact
  WHERE FIND_IN_SET(ContactId, ListContactId);
END
$$

DELIMITER ;

--
-- Create view `view_contact`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_contact
AS
SELECT
  `c`.`ContactId` AS `ContactId`,
  `c`.`UserId` AS `UserId`,
  `c`.`ContactTitle` AS `ContactTitle`,
  `c`.`ContactContent` AS `ContactContent`,
  `c`.`ContactToEmail` AS `ContactToEmail`,
  `c`.`ContactStatus` AS `ContactStatus`,
  `c`.`CreatedDate` AS `CreatedDate`,
  `u`.`UserName` AS `UserName`,
  `u`.`UserCode` AS `UserCode`,
  `u`.`IsEmployee` AS `IsEmployee`
FROM (`contact` `c`
  LEFT JOIN `user` `u`
    ON ((`c`.`UserId` = `u`.`UserId`)));

DELIMITER $$

--
-- Create procedure `Proc_Contact_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Contact_GetFilterPaging (IN ContactFilter varchar(100), IN IsEmployee bit(1), IN ContactStatus int, IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber > 0 THEN
    SET allRecord = (SELECT
        COUNT(*)
      FROM View_Contact vc);
    CREATE TEMPORARY TABLE FilterContact (SELECT
        *
      FROM View_Contact vc
      WHERE ((ContactStatus IS NULL
      OR (INSTR(va.ContactStatus, ContactStatus) > 0))
      AND (IsEmployee IS NULL
      OR (INSTR(va.IsEmployee, IsEmployee) > 0))
      AND ((INSTR(vc.UserCode, ContactFilter) > 0)
      OR (INSTR(vc.UserName, ContactFilter) > 0)
      OR (INSTR(vc.ContactFilter, ContactFilter) > 0))
      ));
    SET TotalRecord = (SELECT
        COUNT(*)
      FROM FilterContact);
    SET $row = (PageNumber - 1) * PageSize;
    SET recordLastPage = allRecord % PageSize;
    IF recordLastPage > 0 THEN
      SET TotalPage = FLOOR(allRecord / PageSize) + 1;
      IF PageNumber < TotalPage THEN
        SET recordsPerPage = PageSize;
      ELSE
        SET recordsPerPage = recordLastPage;
      END IF;
    ELSE
      SET TotalPage = allRecord / PageSize;
      SET recordsPerPage = PageSize;
    END IF;
    SELECT
      *
    FROM FilterContact fc
    ORDER BY fc.CreatedDate DESC LIMIT $row, recordsPerPage;
    DROP TABLE FilterContact;
  ELSE
    SELECT
      'Không có dữ liệu phù hợp';
  END IF;
END
$$

DELIMITER ;

--
-- Create table `comment`
--
CREATE TABLE comment (
  CommentId char(36) NOT NULL,
  UserId char(36) DEFAULT NULL,
  FoodId char(36) DEFAULT NULL,
  CommentContent text DEFAULT NULL,
  CommentStatus bit(1) DEFAULT NULL,
  CommentStar int UNSIGNED NOT NULL DEFAULT 0,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  OrderId char(36) DEFAULT NULL,
  FoodCode varchar(20) DEFAULT NULL,
  UserName varchar(100) DEFAULT NULL,
  PRIMARY KEY (CommentId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE comment
ADD CONSTRAINT comment_ibfk_1 FOREIGN KEY (UserId)
REFERENCES user (UserId);

--
-- Create foreign key
--
ALTER TABLE comment
ADD CONSTRAINT comment_ibfk_2 FOREIGN KEY (FoodId)
REFERENCES food (FoodId);

--
-- Create view `view_comment`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_comment
AS
SELECT
  `c`.`CommentId` AS `CommentId`,
  `c`.`FoodId` AS `FoodId`,
  `c`.`UserId` AS `UserId`,
  `c`.`OrderId` AS `OrderId`,
  `c`.`CommentContent` AS `CommentContent`,
  `c`.`CommentStatus` AS `CommentStatus`,
  `c`.`CommentStar` AS `CommentStar`,
  `c`.`CreatedDate` AS `CreatedDate`,
  `c`.`CreatedBy` AS `CreatedBy`,
  `c`.`ModifiedDate` AS `ModifiedDate`,
  `c`.`ModifiedBy` AS `ModifiedBy`,
  `u`.`UserName` AS `UserName`,
  `u`.`UserCode` AS `UserCode`,
  `u`.`IsAdmin` AS `IsAdmin`,
  `f`.`FoodName` AS `FoodName`,
  `f`.`FoodCode` AS `FoodCode`
FROM ((`comment` `c`
  LEFT JOIN `user` `u`
    ON ((`c`.`UserName` = `u`.`UserName`)))
  LEFT JOIN `food` `f`
    ON ((`c`.`FoodCode` = `f`.`FoodCode`)));

--
-- Create table `cartdetail`
--
CREATE TABLE cartdetail (
  CartDetailId char(36) NOT NULL,
  UserName varchar(100) DEFAULT NULL,
  FoodDetailId char(36) DEFAULT NULL,
  Quantity int DEFAULT NULL,
  ListTopping text DEFAULT NULL,
  PRIMARY KEY (CartDetailId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE cartdetail
ADD CONSTRAINT cartdetail_ibfk_1 FOREIGN KEY (UserName)
REFERENCES user (UserName);

--
-- Create foreign key
--
ALTER TABLE cartdetail
ADD CONSTRAINT cartdetail_ibfk_2 FOREIGN KEY (FoodDetailId)
REFERENCES fooddetail (FoodDetailId);

DELIMITER $$

--
-- Create procedure `Proc_CartDetail_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CartDetail_Update (IN $CartDetailId char(36), IN $UserName varchar(100), IN $FoodDetailId char(36), IN $Quantity int, IN $ListTopping text)
BEGIN
  UPDATE cartdetail
  SET UserName = $UserName,
      FoodDetailId = $FoodDetailId,
      Quantity = $Quantity,
      ListTopping = $ListTopping
  WHERE CartDetailId = $CartDetailId;
END
$$

--
-- Create procedure `Proc_CartDetail_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CartDetail_Post (IN UserName varchar(100), IN FoodDetailId char(36), IN Quantity int, IN ListTopping text)
BEGIN
  INSERT INTO cartdetail (CartDetailId
  , UserName
  , FoodDetailId
  , Quantity
  , ListTopping)
    VALUES (UUID() -- CartDetailId - CHAR(36) NOT NULL
    , UserName, FoodDetailId, Quantity, ListTopping);
END
$$

--
-- Create procedure `Proc_CartDetail_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CartDetail_Delete (IN ListCartDetailId text)
BEGIN
  DELETE
    FROM CartDetail
  WHERE FIND_IN_SET(CartDetailId, ListCartDetailId);
END
$$

DELIMITER ;

--
-- Create view `view_cartdetail`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_cartdetail
AS
SELECT
  `cd`.`CartDetailId` AS `CartDetailId`,
  `cd`.`FoodDetailId` AS `FoodDetailId`,
  `cd`.`Quantity` AS `Quantity`,
  `cd`.`ListTopping` AS `ListTopping`,
  `cd`.`UserName` AS `UserName`,
  `f`.`FoodId` AS `FoodId`,
  `f`.`FoodName` AS `FoodName`,
  `f`.`FoodCode` AS `FoodCode`,
  `f`.`ImageURL` AS `ImageURL`,
  `fd`.`Amount` AS `UnitPrice`,
  `s`.`SizeName` AS `SizeName`,
  `s`.`SizeCode` AS `SizeCode`,
  `d`.`DiscountCode` AS `DiscountCode`,
  `d`.`DiscountStartDate` AS `DiscountStartDate`,
  `d`.`DiscountEndDate` AS `DiscountEndDate`,
  `d`.`DiscountAmount` AS `DiscountAmount`,
  `d`.`DiscountMaxAmount` AS `DiscountMaxAmount`
FROM ((((`cartdetail` `cd`
  LEFT JOIN `fooddetail` `fd`
    ON ((`cd`.`FoodDetailId` = `fd`.`FoodDetailId`)))
  LEFT JOIN `food` `f`
    ON ((`fd`.`FoodId` = `f`.`FoodId`)))
  LEFT JOIN `size` `s`
    ON ((`fd`.`SizeId` = `s`.`SizeId`)))
  LEFT JOIN `discount` `d`
    ON ((`f`.`DiscountId` = `d`.`DiscountId`)));

DELIMITER $$

--
-- Create procedure `Proc_CartDetail_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_CartDetail_GetFilterPaging (IN UserName varchar(100))
BEGIN
  SELECT
    *
  FROM view_cartdetail vc
  WHERE vc.UserName = UserName;
END
$$

DELIMITER ;

--
-- Create table `blog`
--
CREATE TABLE blog (
  BlogId char(36) NOT NULL,
  BlogCode varchar(20) NOT NULL,
  BlogImage text DEFAULT NULL,
  BlogTopic text DEFAULT NULL,
  BlogTitle text DEFAULT NULL,
  BlogIntro varchar(255) DEFAULT NULL,
  BlogQuote text DEFAULT NULL COMMENT 'Trích dẫn',
  BlogHighlight varchar(255) DEFAULT NULL,
  BlogContent text DEFAULT NULL,
  BlogOther varchar(255) DEFAULT NULL,
  BlogSummary varchar(255) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (BlogId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 6553,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE blog
ADD CONSTRAINT FK_blog_CreatedBy FOREIGN KEY (CreatedBy)
REFERENCES user (UserId) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_Blog_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Blog_Update (IN $BlogId char(36), IN $BlogCode varchar(20), IN $BlogImage text, IN $BlogTopic text, IN $BlogTitle text, IN $BlogIntro varchar(255), IN $BlogQuote text, IN $BlogHighlight varchar(255), IN $BlogContent text, IN $BlogOther varchar(255), IN $BlogSummary varchar(255), IN $ModifiedDate datetime, IN $ModifiedBy char(36))
BEGIN
  UPDATE blog
  SET BlogCode = $BlogCode -- BlogCode - VARCHAR(20) NOT NULL
      ,
      BlogImage = $BlogImage,
      BlogTopic = $BlogTopic -- BlogTopic - TEXT
      ,
      BlogTitle = $BlogTitle -- BlogTitle - TEXT
      ,
      BlogIntro = $BlogIntro -- BlogIntro - VARCHAR(255)
      ,
      BlogQuote = $BlogQuote -- BlogQuote - TEXT
      ,
      BlogHighlight = $BlogHighlight -- BlogHighlight - VARCHAR(255)
      ,
      BlogContent = $BlogContent -- BlogContent - TEXT
      ,
      BlogOther = $BlogOther -- BlogOther - VARCHAR(255)
      ,
      BlogSummary = $BlogSummary -- BlogSummary - VARCHAR(255)
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE BlogId = $BlogId -- BlogId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Blog_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Blog_Post (IN BlogCode varchar(20), IN BlogImage text, IN BlogTopic text, IN BlogTitle text, IN BlogIntro varchar(255), IN BlogQuote text, IN BlogHighlight varchar(255), IN BlogContent text, IN BlogOther varchar(255), IN BlogSummary varchar(255), IN CreatedDate datetime, IN CreatedBy char(36), IN ModifiedDate datetime, IN ModifiedBy char(36))
BEGIN
  INSERT INTO blog (BlogId
  , BlogCode
  , BlogImage
  , BlogTopic
  , BlogTitle
  , BlogIntro
  , BlogQuote
  , BlogHighlight
  , BlogContent
  , BlogOther
  , BlogSummary
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- BlogId - CHAR(36) NOT NULL
    , BlogCode -- BlogCode - VARCHAR(20) NOT NULL
    , BlogImage, BlogTopic -- BlogTopic - TEXT
    , BlogTitle -- BlogTitle - TEXT
    , BlogIntro -- BlogIntro - VARCHAR(255)
    , BlogQuote -- BlogQuote - TEXT
    , BlogHighlight -- BlogHighlight - VARCHAR(255)
    , BlogContent -- BlogContent - TEXT
    , BlogOther -- BlogOther - VARCHAR(255)
    , BlogSummary -- BlogInclude - VARCHAR(255)
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_Blog_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Blog_GetFilterPaging (IN BlogFilter text,
IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM Blog t
    ORDER BY t.CreatedDate DESC;
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM Blog t);
      CREATE TEMPORARY TABLE FilterBlog (SELECT
          *
        FROM Blog t
        WHERE ((BlogFilter IS NULL
        OR INSTR(t.BlogTopic, BlogFilter) > 0
        OR INSTR(t.BlogCode, BlogFilter) > 0)));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterBlog);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterBlog fp
      ORDER BY fp.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterBlog;
    ELSE
      SELECT
        'Không có d? li?u phù h?p';
    END IF;
  END IF;
END
$$

--
-- Create procedure `Proc_Blog_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Blog_Delete (IN ListBlogId text)
BEGIN
  DELETE
    FROM Blog
  WHERE FIND_IN_SET(BlogId, ListBlogId);
END
$$

DELIMITER ;

--
-- Create table `accesslog`
--
CREATE TABLE accesslog (
  AccessLogId char(36) NOT NULL,
  UserActionId char(36) DEFAULT NULL,
  Description text DEFAULT NULL,
  Subject text DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  Action text DEFAULT NULL,
  UserAction varchar(100) DEFAULT NULL,
  PRIMARY KEY (AccessLogId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE accesslog
ADD CONSTRAINT FK_accesslog_UserActionId FOREIGN KEY (UserActionId)
REFERENCES user (UserId) ON DELETE SET NULL;

DELIMITER $$

--
-- Create procedure `Proc_AccessLog_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_AccessLog_Post (IN UserActionId char(36), IN Description text, IN Subject text, IN Action text, IN UserAction varchar(100))
BEGIN
  INSERT INTO accesslog (AccessLogId
  , UserActionId
  , UserAction
  , Description
  , Subject
  , Action
  , CreatedDate
  , ModifiedDate)
    VALUES (UUID() -- AccessLogId - CHAR(36) NOT NULL
    , UserActionId -- UserId - CHAR(36) NOT NULL
    , UserAction, Description -- Description - TEXT
    , Subject -- Subject - TEXT
    , Action, NOW() -- CreatedDate - DATETIME
    , NOW() -- ModifiedDate - DATETIME
    );
END
$$

--
-- Create procedure `Proc_AccessLog_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_AccessLog_Delete (IN ListAccessLogId text)
BEGIN
  DELETE
    FROM `AccessLog`
  WHERE FIND_IN_SET(AccessLogId, ListAccessLogId);
END
$$

DELIMITER ;

--
-- Create table `discountcondition`
--
CREATE TABLE discountcondition (
  DiscountConditionId char(36) NOT NULL,
  DiscountConditionCode varchar(20) DEFAULT NULL,
  DiscountConditionMin int DEFAULT NULL COMMENT 'Số lượng tối thiểu',
  DiscountConditionMax int DEFAULT NULL,
  DiscountConditionReason text DEFAULT NULL,
  DiscountConditionFor text DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  DiscountConditionName varchar(255) DEFAULT NULL,
  PRIMARY KEY (DiscountConditionId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_DiscountCondition_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DiscountCondition_Update (IN $DiscountConditionId char(36), IN $DiscountConditionCode varchar(20), IN $DiscountConditionMin int, IN $DiscountConditionMax int, IN $DiscountConditionReason text, IN $DiscountConditionFor text, IN $CreatedDate datetime, IN $CreatedBy char(36), IN $ModifiedDate datetime, IN $ModifiedBy char(36), IN $DiscountConditionName varchar(255))
BEGIN
  UPDATE DiscountCondition
  SET DiscountConditionCode = $DiscountConditionCode -- DiscountConditionCode - VARCHAR(20) NOT NULL
      ,
      DiscountConditionMin = $DiscountConditionMin -- DiscountConditionMin - INT
      ,
      DiscountConditionMax = $DiscountConditionMax -- DiscountConditionMax - INT
      ,
      DiscountConditionReason = $DiscountConditionReason -- DiscountConditionReason - TEXT
      ,
      DiscountConditionFor = $DiscountConditionFor -- DiscountConditionFor - TEXT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
      ,
      DiscountConditionName = $DiscountConditionName
  WHERE DiscountConditionId = $DiscountConditionId -- DiscountConditionId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_DiscountCondition_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DiscountCondition_Post (IN DiscountConditionId char(36), IN DiscountConditionCode varchar(20), IN DiscountConditionMin int, IN DiscountConditionMax int, IN DiscountConditionReason text, IN DiscountConditionFor text, IN CreatedDate datetime, IN CreatedBy char(36), IN ModifiedDate datetime, IN ModifiedBy char(36), IN DiscountConditionName varchar(255))
BEGIN
  INSERT INTO DiscountCondition (DiscountConditionId
  , DiscountConditionCode
  , DiscountConditionMin
  , DiscountConditionMax
  , DiscountConditionReason
  , DiscountConditionFor
  , DiscountConditionName
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- DiscountConditionId - CHAR(36) NOT NULL
    , DiscountConditionCode -- DiscountConditionCode - VARCHAR(20) NOT NULL
    , DiscountConditionMin -- DiscountConditionMin - INT
    , DiscountConditionMin -- DiscountConditionMax - INT
    , DiscountConditionReason -- DiscountConditionReason - TEXT
    , DiscountConditionFor -- DiscountConditionFor - TEXT
    , DiscountConditionName, NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_DiscountCondition_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DiscountCondition_GetFilterPaging (IN DiscountConditionFilter varchar(100), IN DiscountConditionMinInput int, IN DiscountConditionMaxInput int, IN ListDiscountConditionObject text, IN ListUserSatisfy text, IN PageNumber int, IN PageSize int, OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber > 0 THEN
    SET allRecord = (SELECT
        COUNT(*)
      FROM DiscountCondition vd);
    CREATE TEMPORARY TABLE FilterDiscountCondition (SELECT
        *
      FROM DiscountCondition vd
      WHERE ((ListDiscountConditionObject IS NULL
      OR (FIND_IN_SET(vd.DiscountConditionReason, ListDiscountConditionObject)))
      AND (DiscountConditionMinInput IS NULL
      OR DiscountConditionMinInput <= vd.DiscountConditionMin)
      AND (DiscountConditionMaxInput IS NULL
      OR DiscountConditionMaxInput >= vd.DiscountConditionMax)
      AND (DiscountConditionFilter IS NULL
      OR INSTR(vd.DiscountConditionCode, DiscountConditionFilter) > 0)
      AND (ListDiscountConditionObject IS NULL
      OR FIND_IN_SET(vd.DiscountConditionFor, ListDiscountConditionObject))
      AND (ListUserSatisfy IS NULL)
      ));
    SET TotalRecord = (SELECT
        COUNT(*)
      FROM FilterDiscountCondition);
    SET $row = (PageNumber - 1) * PageSize;
    SET recordLastPage = allRecord % PageSize;
    IF recordLastPage > 0 THEN
      SET TotalPage = FLOOR(allRecord / PageSize) + 1;
      IF PageNumber < TotalPage THEN
        SET recordsPerPage = PageSize;
      ELSE
        SET recordsPerPage = recordLastPage;
      END IF;
    ELSE
      SET TotalPage = allRecord / PageSize;
      SET recordsPerPage = PageSize;
    END IF;
    SELECT
      *
    FROM FilterDiscountCondition fdc
    ORDER BY fdc.CreatedDate DESC LIMIT $row, recordsPerPage;
    DROP TABLE FilterDiscountCondition;
  ELSE
    SELECT
      'Không có dữ liệu phù hợp';
  END IF;
END
$$

--
-- Create procedure `Proc_DiscountCondition_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_DiscountCondition_Delete (IN ListDiscountConditionId text)
BEGIN
  DELETE
    FROM DiscountCondition
  WHERE FIND_IN_SET(DiscountConditionId, ListDiscountConditionId);
END
$$

DELIMITER ;

--
-- Create view `view_discount`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_discount
AS
SELECT
  `d`.`DiscountId` AS `DiscountId`,
  `d`.`DiscountCode` AS `DiscountCode`,
  `d`.`DiscountTitle` AS `DiscountTitle`,
  `d`.`DiscountMaxAmount` AS `DiscountMaxAmount`,
  `d`.`DiscountAmount` AS `DiscountAmount`,
  `d`.`DiscountStartDate` AS `DiscountStartDate`,
  `d`.`DiscountEndDate` AS `DiscountEndDate`,
  `d`.`DiscountConditionId` AS `DiscountConditionId`,
  `d`.`DiscountType` AS `DiscountType`,
  `d`.`CreatedDate` AS `CreatedDate`,
  `d`.`CreatedBy` AS `CreatedBy`,
  `d`.`ModifiedDate` AS `ModifiedDate`,
  `d`.`ModifiedBy` AS `ModifiedBy`,
  `dc`.`DiscountConditionCode` AS `DiscountConditionCode`,
  `dc`.`DiscountConditionMin` AS `DiscountConditionMin`,
  `dc`.`DiscountConditionMax` AS `DiscountConditionMax`,
  `dc`.`DiscountConditionReason` AS `DiscountConditionReason`,
  `dc`.`DiscountConditionFor` AS `DiscountConditionFor`
FROM (`discount` `d`
  LEFT JOIN `discountcondition` `dc`
    ON ((`d`.`DiscountConditionId` = `dc`.`DiscountConditionId`)));

DELIMITER $$

--
-- Create procedure `Proc_Discount_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Discount_GetFilterPaging (IN DiscountFilter varchar(100), IN DiscountFrom datetime, IN DiscountEnd datetime,
IN DiscountAmount float, IN DiscountOperation int, DiscountMaxAmount int, IN DiscountType int,
IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM View_Discount vd
    WHERE ((DiscountAmount IS NULL
    OR (((DiscountOperation IS NULL)
    OR (DiscountOperation = 3))
    AND DiscountAmount = vd.DiscountAmount)
    OR (DiscountOperation = 0
    AND DiscountAmount >= vd.DiscountAmount)
    OR (DiscountOperation = 1
    AND DiscountAmount <= vd.DiscountAmount))
    AND (DiscountMaxAmount IS NULL
    OR DiscountMaxAmount <= vd.DiscountMaxAmount)
    AND (DiscountFilter IS NULL
    OR (INSTR(vd.DiscountCode, DiscountFilter) > 0)
    OR (INSTR(vd.DiscountTitle, DiscountFilter) > 0))
    AND (DiscountType IS NULL
    OR DiscountType = vd.DiscountType)
    AND ((DiscountFrom IS NULL
    OR DiscountFrom >= vd.DiscountStartDate
    OR vd.DiscountStartDate IS NULL)
    AND (DiscountEnd IS NULL
    OR DiscountEnd <= vd.DiscountEndDate
    OR vd.DiscountEndDate IS NULL))
    );
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM View_Discount vd);
      CREATE TEMPORARY TABLE FilterDiscount (SELECT
          *
        FROM View_Discount vd
        WHERE ((DiscountAmount IS NULL
        OR (((DiscountOperation IS NULL)
        OR (DiscountOperation = 3))
        AND DiscountAmount = vd.DiscountAmount)
        OR (DiscountOperation = 0
        AND DiscountAmount >= vd.DiscountAmount)
        OR (DiscountOperation = 1
        AND DiscountAmount <= vd.DiscountAmount))
        AND (DiscountMaxAmount IS NULL
        OR DiscountMaxAmount <= vd.DiscountMaxAmount)
        AND (DiscountFilter IS NULL
        OR (INSTR(vd.DiscountCode, DiscountFilter) > 0)
        OR (INSTR(vd.DiscountTitle, DiscountFilter) > 0))
        AND (DiscountType IS NULL
        OR DiscountType = vd.DiscountType)
        AND ((DiscountFrom IS NULL
        OR DiscountFrom >= vd.DiscountStartDate
        OR vd.DiscountStartDate IS NULL)
        AND (DiscountEnd IS NULL
        OR DiscountEnd <= vd.DiscountEndDate
        OR vd.DiscountEndDate IS NULL))
        ));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterDiscount);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterDiscount fd
      ORDER BY fd.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterDiscount;
    ELSE
      SELECT
        'Không có dữ liệu phù hợp';
    END IF;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `action`
--
CREATE TABLE action (
  ActionId char(36) NOT NULL,
  ActionCode varchar(20) NOT NULL,
  ActionName varchar(100) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (ActionId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create table `subject`
--
CREATE TABLE subject (
  SubjectId char(36) NOT NULL,
  SubjectCode varchar(20) NOT NULL,
  SubjectName varchar(100) DEFAULT NULL,
  SubjectParentId char(36) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (SubjectId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 327,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create view `view_accesslog`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_accesslog
AS
SELECT
  `al`.`AccessLogId` AS `AccessLogId`,
  `al`.`UserActionId` AS `UserActionId`,
  `al`.`UserAction` AS `UserName`,
  `al`.`Description` AS `Description`,
  `al`.`Subject` AS `Subject`,
  `al`.`Action` AS `Action`,
  `al`.`CreatedDate` AS `CreatedDate`,
  `al`.`CreatedBy` AS `CreatedBy`,
  `al`.`ModifiedDate` AS `ModifiedDate`,
  `al`.`ModifiedBy` AS `ModifiedBy`,
  `u`.`UserName` AS `UserAction`,
  `u`.`UserCode` AS `UserCode`,
  `u`.`IsEmployee` AS `IsEmployee`,
  `u`.`IsAdmin` AS `IsAdmin`
FROM (`accesslog` `al`
  LEFT JOIN `user` `u`
    ON ((`al`.`UserActionId` = `u`.`UserId`)));

DELIMITER $$

--
-- Create procedure `Proc_AccessLog_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_AccessLog_GetFilterPaging (IN AccessLogFilter varchar(100), IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber > 0 THEN
    SET allRecord = (SELECT
        COUNT(*)
      FROM View_AccessLog va);
    CREATE TEMPORARY TABLE FilterAccessLog (SELECT
        *
      FROM View_AccessLog va
      WHERE ((INSTR(va.UserCode, AccessLogFilter) > 0)
      OR (INSTR(va.UserName, AccessLogFilter) > 0)
      OR ((INSTR(va.UserAction, AccessLogFilter) > 0)
      OR INSTR(va.Subject, AccessLogFilter) > 0)));
    SET TotalRecord = (SELECT
        COUNT(*)
      FROM FilterAccessLog fal);
    SET $row = (PageNumber - 1) * PageSize;
    SET recordLastPage = allRecord % PageSize;
    IF recordLastPage > 0 THEN
      SET TotalPage = FLOOR(allRecord / PageSize) + 1;
      IF PageNumber < TotalPage THEN
        SET recordsPerPage = PageSize;
      ELSE
        SET recordsPerPage = recordLastPage;
      END IF;
    ELSE
      SET TotalPage = allRecord / PageSize;
      SET recordsPerPage = PageSize;
    END IF;
    SELECT
      *
    FROM FilterAccessLog va
    ORDER BY va.CreatedDate DESC LIMIT $row, recordsPerPage;
    DROP TABLE FilterAccessLog;
  ELSE
    SELECT
      'Không có dữ liệu phù hợp';
  END IF;
END
$$

DELIMITER ;

--
-- Create table `permission`
--
CREATE TABLE permission (
  PermissionId char(36) NOT NULL,
  ActionId char(36) NOT NULL,
  SubjectId char(36) NOT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (PermissionId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 327,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE permission
ADD CONSTRAINT permission_ibfk_1 FOREIGN KEY (ActionId)
REFERENCES action (ActionId);

--
-- Create foreign key
--
ALTER TABLE permission
ADD CONSTRAINT permission_ibfk_2 FOREIGN KEY (SubjectId)
REFERENCES subject (SubjectId);

DELIMITER $$

--
-- Create procedure `Proc_User_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_Update (IN $UserId char(36),
IN $UserName varchar(100),
IN $UserCode varchar(20),
IN $Pass text,
IN $FullName varchar(100),
IN $Phone varchar(15),
IN $Address varchar(100),
IN $Permission text,
IN $Email varchar(50),
IN $Gender int,
IN $IsAdmin bit(1),
IN $IsEmployee bit(1),
IN $Position text,
IN $UserStatus int,
IN $ModifiedBy char(36))
BEGIN
  UPDATE user
  SET UserName = $UserName -- UserName - VARCHAR(100) NOT NULL
      ,
      UserCode = $UserCode -- UserCode - VARCHAR(20)
      ,
      Pass = $Pass -- Pass - TEXT NOT NULL
      ,
      FullName = $FullName -- FullName - VARCHAR(100)
      ,
      Phone = $Phone -- Phone - VARCHAR(15)
      ,
      Address = $Address -- Address - VARCHAR(100)
      ,
      Permission = $Permission -- Permission - TEXT
      ,
      Email = $Email -- Email - VARCHAR(50)
      ,
      Gender = $Gender -- Gender - INT
      ,
      IsAdmin = $IsAdmin -- IsAdmin - BIT(1) NOT NULL
      ,
      IsEmployee = $IsEmployee -- IsEmployee - BIT(1) NOT NULL
      ,
      Position = $Position -- Position - TEXT
      ,
      UserStatus = $UserStatus -- UserStatus - INT
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE UserId = $UserId -- UserId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_User_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_Post (IN UserName varchar(100), IN UserCode varchar(20), IN Pass text, IN FullName varchar(100), IN Phone varchar(15), IN Address varchar(100), IN Permission text, IN Email varchar(50), IN Gender int, IN IsAdmin bit, IN IsEmployee bit, IN Position text, IN UserStatus int)
BEGIN
  INSERT INTO `user` (UserId,
  UserName,
  UserCode,
  Pass,
  FullName,
  Phone,
  Address,
  Permission,
  Email,
  Gender,
  IsAdmin,
  IsEmployee,
  `Position`,
  UserStatus,
  CreatedDate,
  ModifiedDate)
    VALUES (UUID() -- UserId - CHAR(36) NOT NULL
    , UserName -- UserName - VARCHAR(100) NOT NULL
    , UserCode -- UserCode - VARCHAR(20)
    , Pass -- Pass - TEXT NOT NULL
    , FullName -- FullName - VARCHAR(100)
    , Phone -- Phone - VARCHAR(15)
    , Address -- Address - VARCHAR(100)
    , Permission -- Permission - TEXT
    , Email -- Email - VARCHAR(50)
    , Gender -- Gender - INT
    , IsAdmin -- IsAdmin - BIT(1) NOT NULL
    , IsEmployee -- IsEmployee - BIT(1) NOT NULL
    , Position -- Position - TEXT
    , UserStatus -- UserStatus - INT
    , NOW() -- CreatedDate - DATETIME
    , NOW() -- ModifiedDate - DATETIME
    );
END
$$

DELIMITER ;

--
-- Create view `view_user`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_user
AS
SELECT
  `u`.`UserId` AS `UserId`,
  `u`.`UserName` AS `UserName`,
  `u`.`UserCode` AS `UserCode`,
  `u`.`Pass` AS `Pass`,
  `u`.`FullName` AS `FullName`,
  `u`.`Phone` AS `Phone`,
  `u`.`Address` AS `Address`,
  `u`.`Permission` AS `Permission`,
  `u`.`Email` AS `Email`,
  `u`.`Gender` AS `Gender`,
  `u`.`IsAdmin` AS `IsAdmin`,
  `u`.`IsEmployee` AS `IsEmployee`,
  `u`.`Position` AS `Position`,
  `u`.`UserStatus` AS `UserStatus`,
  `u`.`UserToken` AS `UserToken`,
  `u`.`CreatedDate` AS `CreatedDate`,
  `u`.`ModifiedDate` AS `ModifiedDate`,
  `u`.`ModifiedBy` AS `ModifiedBy`
FROM `user` `u`;

DELIMITER $$

--
-- Create procedure `Proc_User_GetNewCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_GetNewCode ()
BEGIN
  SELECT
    CONCAT('UC-', (MAX(CAST(SUBSTR(UserCode, 4, LENGTH(UserCode) - 3) AS UNSIGNED) + 1))) AS newCode
  FROM View_User;
END
$$

--
-- Create procedure `Proc_User_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_GetFilterPaging (IN UserFilter varchar(100), IN IsEmployee bit(1), IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM view_user vu
    WHERE (IsEmployee IS NULL
    OR IsEmployee = vu.IsEmployee)
    ORDER BY vu.CreatedDate DESC;
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM View_User vu);
      CREATE TEMPORARY TABLE FilterUser (SELECT
          *
        FROM View_User vu
        WHERE (((vu.IsEmployee IS NULL)
        OR (INSTR(vu.IsEmployee, IsEmployee) > 0))
        AND ((INSTR(vu.UserCode, UserFilter) > 0)
        OR (INSTR(vu.UserName, UserFilter) > 0)
        OR (INSTR(vu.FullName, UserFilter) > 0)
        OR (INSTR(vu.Phone, UserFilter) > 0)
        OR (INSTR(vu.Address, UserFilter) > 0))));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterUser);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterUser vu
      ORDER BY vu.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterUser;
    ELSE
      SELECT
        'Không có dữ liệu phù hợp';
    END IF;
  END IF;
END
$$

--
-- Create procedure `Proc_User_By_UserName`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_By_UserName (IN $UserName varchar(20))
BEGIN
  SELECT
    *
  FROM view_user vu
  WHERE vu.UserName = $UserName LIMIT 0, 1;
END
$$

DELIMITER ;

--
-- Create table `topping`
--
CREATE TABLE topping (
  ToppingId char(36) NOT NULL,
  ToppingName text DEFAULT NULL,
  ToppingCode varchar(20) NOT NULL,
  ToppingAmount int DEFAULT NULL,
  ToppingImage text DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (ToppingId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_Topping_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Topping_Update (IN $ToppingId char(36)
, IN $ToppingCode varchar(20)
, IN $ToppingImage text
, IN $ToppingName text
, IN $ToppingAmount int
, IN $CreatedDate datetime
, IN $CreatedBy char(36)
, IN $ModifiedDate datetime
, IN $ModifiedBy char(36))
BEGIN
  UPDATE Topping
  SET ToppingName = $ToppingImage -- ToppingName - TEXT
      ,
      ToppingCode = $ToppingCode -- ToppingCode - VARCHAR(20) NOT NULL
      ,
      ToppingAmount = $ToppingAmount -- ToppingAmount - INT
      ,
      ToppingImage = $ToppingImage -- ToppingImage - TEXT
      ,
      CreatedDate = NOW() -- CreatedDate - DATETIME
      ,
      CreatedBy = $CreatedBy -- CreatedBy - CHAR(36)
      ,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE ToppingId = $ToppingId -- ToppingId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Topping_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Topping_Post (IN ToppingId char(36)
, IN ToppingCode varchar(20)
, IN ToppingImage text
, IN ToppingName text
, IN ToppingAmount int
, IN CreatedDate datetime
, IN CreatedBy char(36)
, IN ModifiedDate datetime
, IN ModifiedBy char(36))
BEGIN
  INSERT INTO Topping (ToppingId
  , ToppingName
  , ToppingCode
  , ToppingAmount
  , ToppingImage
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID() -- ToppingId - CHAR(36) NOT NULL
    , ToppingName -- ToppingName - TEXT
    , ToppingCode -- ToppingCode - VARCHAR(20) NOT NULL
    , ToppingAmount -- ToppingAmount - INT
    , ToppingImage -- ToppingImage - TEXT
    , NOW() -- CreatedDate - DATETIME
    , CreatedBy -- CreatedBy - CHAR(36)
    , NOW() -- ModifiedDate - DATETIME
    , ModifiedBy -- ModifiedBy - CHAR(36)
    );
END
$$

--
-- Create procedure `Proc_Topping_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Topping_GetFilterPaging (IN ToppingFilter text, IN ToppingAmountMin int, IN ToppingAmountMax int,
IN PageNumber int, IN PageSize int,
OUT TotalRecord int, OUT TotalPage int)
BEGIN
  DECLARE allRecord int;
  DECLARE recordLastPage int;
  DECLARE $row int;
  DECLARE recordsPerPage int;
  IF PageNumber IS NULL THEN
    SELECT
      *
    FROM Topping t
    WHERE ((ToppingFilter IS NULL
    OR INSTR(t.ToppingName, ToppingFilter) > 0
    OR INSTR(t.ToppingCode, ToppingFilter) > 0)
    AND (ToppingAmountMin IS NULL
    OR t.ToppingAmount >= ToppingAmountMin)
    AND (ToppingAmountMax IS NULL
    OR t.ToppingAmount <= ToppingAmountMax))
    ORDER BY t.CreatedDate DESC;
  ELSE
    IF PageNumber > 0 THEN
      SET allRecord = (SELECT
          COUNT(*)
        FROM Topping t);
      CREATE TEMPORARY TABLE FilterTopping (SELECT
          *
        FROM Topping t
        WHERE ((ToppingFilter IS NULL
        OR INSTR(t.ToppingName, ToppingFilter) > 0
        OR INSTR(t.ToppingCode, ToppingFilter) > 0)
        AND (ToppingAmountMin IS NULL
        OR t.ToppingAmount >= ToppingAmountMin)
        AND (ToppingAmountMax IS NULL
        OR t.ToppingAmount <= ToppingAmountMax)));
      SET TotalRecord = (SELECT
          COUNT(*)
        FROM FilterTopping);
      SET $row = (PageNumber - 1) * PageSize;
      SET recordLastPage = allRecord % PageSize;
      IF recordLastPage > 0 THEN
        SET TotalPage = FLOOR(allRecord / PageSize) + 1;
        IF PageNumber < TotalPage THEN
          SET recordsPerPage = PageSize;
        ELSE
          SET recordsPerPage = recordLastPage;
        END IF;
      ELSE
        SET TotalPage = allRecord / PageSize;
        SET recordsPerPage = PageSize;
      END IF;
      SELECT
        *
      FROM FilterTopping fp
      ORDER BY fp.CreatedDate DESC LIMIT $row, recordsPerPage;
      DROP TABLE FilterTopping;
    ELSE
      SELECT
        'Không có d? li?u phù h?p';
    END IF;
  END IF;
END
$$

--
-- Create procedure `Proc_Topping_GetByFood`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Topping_GetByFood (IN $FoodId char(36))
BEGIN
  SELECT
    *
  FROM topping t
  WHERE FIND_IN_SET(t.ToppingId, (SELECT
      fd.ListTopping
    FROM food fd
    WHERE fd.FoodId = $FoodId));
END
$$

--
-- Create procedure `Proc_Topping_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Topping_Delete (IN ListToppingId text)
BEGIN
  DELETE
    FROM Topping
  WHERE FIND_IN_SET(ToppingId, ListToppingId);
END
$$

DELIMITER ;

--
-- Create table `ratingsheet`
--
CREATE TABLE ratingsheet (
  RatingSheetId char(36) NOT NULL,
  RatingSheetName text DEFAULT NULL,
  RatingSheetCode varchar(20) NOT NULL,
  RatingSheetStatus bit(1) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (RatingSheetId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 327,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `Proc_RatingSheet_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_RatingSheet_Update (IN $RatingSheetId char(36),
IN $RatingSheetCode varchar(20),
IN $RatingSheetName text,
IN $RatingSheetStatus bit(1),
IN $CreatedDate datetime,
IN $CreatedBy char(36),
IN $ModifiedDate datetime,
IN $ModifiedBy char(36))
BEGIN
  UPDATE RatingSheet
  SET RatingSheetName = $RatingSheetName -- RatingSheetName - TEXT
      ,
      RatingSheetCode = $RatingSheetCode -- RatingSheetCode - VARCHAR(20) NOT NULL
      ,
      RatingSheetStatus = $RatingSheetStatus,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE RatingSheetId = $RatingSheetId -- RatingSheetId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_RatingSheet_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_RatingSheet_Post (IN RatingSheetId char(36),
IN RatingSheetCode varchar(20),
IN RatingSheetName text,
IN RatingSheetStatus bit(1),
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  INSERT INTO RatingSheet (RatingSheetId
  , RatingSheetName
  , RatingSheetCode
  , RatingSheetStatus
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID(), RatingSheetName, RatingSheetCode, RatingSheetStatus, NOW(), CreatedBy, NOW(), ModifiedBy);
END
$$

--
-- Create procedure `Proc_RatingSheet_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_RatingSheet_Delete (IN ListRatingSheetId text)
BEGIN
  DELETE
    FROM RatingSheet
  WHERE FIND_IN_SET(RatingSheetId, ListRatingSheetId);
END
$$

DELIMITER ;

--
-- Create table `question`
--
CREATE TABLE question (
  QuestionId char(36) NOT NULL,
  RatingSheetId char(36) NOT NULL,
  QuestionCode varchar(20) NOT NULL,
  QuestionName text DEFAULT NULL,
  QuestionContent text DEFAULT NULL,
  QuestionStatus bit(1) DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (QuestionId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 327,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE question
ADD CONSTRAINT question_ibfk_1 FOREIGN KEY (RatingSheetId)
REFERENCES ratingsheet (RatingSheetId) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `Proc_Question_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Question_Update (IN $QuestionId char(36),
IN $RatingSheetId char(36),
IN $QuestionCode varchar(20),
IN $QuestionName text,
IN $QuestionContent text,
IN $QuestionStatus bit(1),
IN $CreatedDate datetime,
IN $CreatedBy char(36),
IN $ModifiedDate datetime,
IN $ModifiedBy char(36))
BEGIN
  UPDATE Question
  SET RatingSheetId = $RatingSheetId,
      QuestionName = $QuestionName -- QuestionName - TEXT
      ,
      QuestionContent = $QuestionContent -- QuestionContent - TEXT
      ,
      QuestionCode = $QuestionCode -- QuestionCode - VARCHAR(20) NOT NULL
      ,
      QuestionStatus = $QuestionStatus,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE QuestionId = $QuestionId -- RatingSheetId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Question_Post`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Question_Post (IN QuestionId char(36),
IN RatingSheetId char(36),
IN QuestionCode varchar(20),
IN QuestionName text,
IN QuestionContent text,
IN QuestionStatus bit(1),
IN CreatedDate datetime,
IN CreatedBy char(36),
IN ModifiedDate datetime,
IN ModifiedBy char(36))
BEGIN
  INSERT INTO Question (QuestionId
  , RatingSheetId
  , QuestionName
  , QuestionCode
  , QuestionContent
  , QuestionStatus
  , CreatedDate
  , CreatedBy
  , ModifiedDate
  , ModifiedBy)
    VALUES (UUID(), RatingSheetId, QuestionName, QuestionCode, QuestionContent, QuestionStatus, NOW(), CreatedBy, NOW(), ModifiedBy);
END
$$

--
-- Create procedure `Proc_Question_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Question_Delete (IN ListQuestionId text)
BEGIN
  DELETE
    FROM Question
  WHERE FIND_IN_SET(QuestionId, ListQuestionId);
END
$$

DELIMITER ;

--
-- Create view `view_question`
--
CREATE
DEFINER = 'root'@'localhost'
VIEW view_question
AS
SELECT
  `q`.`QuestionId` AS `QuestionId`,
  `q`.`RatingSheetId` AS `RatingSheetId`,
  `q`.`QuestionCode` AS `QuestionCode`,
  `q`.`QuestionName` AS `QuestionName`,
  `q`.`QuestionContent` AS `QuestionContent`,
  `q`.`QuestionStatus` AS `QuestionStatus`,
  `q`.`CreatedDate` AS `CreatedDate`,
  `q`.`CreatedBy` AS `CreatedBy`,
  `q`.`ModifiedDate` AS `ModifiedDate`,
  `q`.`ModifiedBy` AS `ModifiedBy`,
  `rs`.`RatingSheetName` AS `RatingSheetName`,
  `rs`.`RatingSheetCode` AS `RatingSheetCode`,
  `rs`.`RatingSheetStatus` AS `RatingSheetStatus`
FROM (`question` `q`
  LEFT JOIN `ratingsheet` `rs`
    ON ((`q`.`RatingSheetId` = `rs`.`RatingSheetId`)));

--
-- Create table `answer`
--
CREATE TABLE answer (
  AnswerId char(36) NOT NULL,
  RatingSheetId char(36) NOT NULL,
  UserId char(36) NOT NULL,
  AnswerContent text DEFAULT NULL,
  CreatedDate datetime DEFAULT NULL,
  CreatedBy char(36) DEFAULT NULL,
  ModifiedDate datetime DEFAULT NULL,
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (AnswerId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE answer
ADD CONSTRAINT answer_ibfk_1 FOREIGN KEY (RatingSheetId)
REFERENCES ratingsheet (RatingSheetId);

--
-- Create foreign key
--
ALTER TABLE answer
ADD CONSTRAINT answer_ibfk_2 FOREIGN KEY (UserId)
REFERENCES user (UserId);

--
-- Create table `layoutconfig`
--
CREATE TABLE layoutconfig (
  LayoutId char(36) NOT NULL,
  LayoutName varchar(50) DEFAULT NULL,
  LayoutValue text DEFAULT NULL,
  PRIMARY KEY (LayoutId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `LayoutName` on table `layoutconfig`
--
ALTER TABLE layoutconfig
ADD UNIQUE INDEX LayoutName (LayoutName);

DELIMITER $$

--
-- Create procedure `Proc_LayoutConfig_GetLayout`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_LayoutConfig_GetLayout (IN $LayoutName varchar(50))
BEGIN
  SELECT
    *
  FROM LayoutConfig lc
  WHERE lc.LayoutName = $LayoutName;
END
$$

--
-- Create procedure `Proc_User_Login`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_User_Login (IN $UserName varchar(100), IN $Pass text)
BEGIN
  SELECT
    u.UserName,
    u.IsAdmin,
    u.IsEmployee,
    u.Permission,
    u.Address,
    u.Phone,
    u.FullName,
    u.Email,
    u.UserCode,
    u.Position,
    u.Permission
  FROM user u
  WHERE u.UserName = $UserName
  AND u.Pass = $Pass LIMIT 0, 1;
END
$$

--
-- Create procedure `Proc_Topping_GetByListToppingId`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Topping_GetByListToppingId (IN ListToppingId text)
BEGIN
  SELECT
    t.*
  FROM Topping t
  WHERE FIND_IN_SET(t.ToppingId, ListToppingId);
END
$$

--
-- Create procedure `Proc_Size_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Size_GetFilterPaging (IN SizeFilter text, IN SizeStatus bit(1))
BEGIN
  SELECT
    s.*
  FROM Size s
  WHERE (SizeFilter IS NULL
  OR (INSTR(s.SizeCode, SizeFilter) > 0)
  OR (INSTR(s.SizeName, SizeFilter) > 0))
  AND (SizeStatus IS NULL
  OR SizeStatus = s.SizeStatus)
  ORDER BY s.CreatedDate DESC;
END
$$

--
-- Create procedure `Proc_RatingSheet_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_RatingSheet_GetFilterPaging (IN RatingSheetFilter text, IN RatingSheetDate datetime, IN RatingSheetOperation int,
IN RatingSheetStatus bit(1))
BEGIN
  SELECT
    rs.*
  FROM RatingSheet rs
  WHERE ((INSTR(rs.RatingSheetCode, RatingSheetFilter) > 0)
  OR (INSTR(rs.RatingSheetName, RatingSheetFilter) > 0))
  AND (CASE RatingSheetOperation WHEN 0 THEN RatingSheetDate >= rs.CreatedDate WHEN 1 THEN RatingSheetDate <= rs.CreatedDate END)
  AND (RatingSheetStatus IS NULL
  OR RatingSheetStatus = rs.RatingSheetStatus)
  ORDER BY rs.CreatedDate DESC;
END
$$

--
-- Create procedure `Proc_Question_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Question_GetFilterPaging (IN QuestionFilter text, IN RatingSheetId char(36))
BEGIN
  SELECT
    vq.*
  FROM View_Question vq
  WHERE ((INSTR(vq.QuestionCode, QuestionFilter) > 0)
  OR (INSTR(vq.QuestionName, QuestionFilter) > 0)
  OR (INSTR(vq.RatingSheetCode, QuestionFilter) > 0)
  OR (INSTR(vq.RatingSheetName, QuestionFilter) > 0))
  AND (RatingSheetId IS NULL
  OR RatingSheetId = vq.RatingSheetId)
  ORDER BY vq.CreatedDate DESC;
END
$$

--
-- Create procedure `Proc_Food_GetByCode`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Food_GetByCode (IN $FoodCode varchar(20))
BEGIN
  SELECT
    vf.*
  FROM View_Food vf
  WHERE vf.FoodCode = $FoodCode LIMIT 0, 1;
END
$$

--
-- Create procedure `Proc_FoodDetail_GetByFoodId`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_FoodDetail_GetByFoodId (IN $FoodId char(36))
BEGIN
  SELECT
    vfd.*
  FROM View_FoodDetail vfd
  WHERE vfd.FoodId = $FoodId
  ORDER BY vfd.Amount;
END
$$

--
-- Create procedure `Proc_Faq_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Faq_GetFilterPaging (IN FaqFilter text)
BEGIN
  SELECT
    f.*
  FROM Faq f
  WHERE FaqFilter IS NULL
  OR (INSTR(f.FaqCode, FaqFilter) > 0)
  OR (INSTR(f.FaqName, FaqFilter) > 0)
  ORDER BY f.Priority, f.CreatedDate DESC;
END
$$

--
-- Create procedure `Proc_Comment_Update`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Comment_Update (IN $CommentId char(36)
, IN $UserId char(36)
, IN $FoodId char(36)
, IN $CommentContent text
, IN $CommentStatus bit(1)
, IN $CommentStar int
, IN $CreatedDate datetime
, IN $CreatedBy char(36)
, IN $ModifiedDate datetime
, IN $ModifiedBy char(36))
BEGIN
  UPDATE Comment
  SET UserId = $UserId,
      FoodId = $FoodId,
      CommentStatus = $CommentStatus,
      CommentStar = $CommentStar,
      CommentContent = $CommentContent,
      ModifiedDate = NOW() -- ModifiedDate - DATETIME
      ,
      ModifiedBy = $ModifiedBy -- ModifiedBy - CHAR(36)
  WHERE CommentId = $CommentId -- CategoryId - CHAR(36) NOT NULL
  ;
END
$$

--
-- Create procedure `Proc_Comment_GetFilterPaging`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Comment_GetFilterPaging (IN CommentStar int, IN CommentStatus bit, IN FoodCode varchar(20), IN ListUserId text, IN OrderId char(36))
BEGIN
  SELECT
    vc.*
  FROM View_Comment vc
  WHERE (vc.CommentStatus = CommentStatus
  OR CommentStatus IS NULL)
  AND (vc.CommentStar = CommentStar
  OR CommentStar IS NULL)
  AND (FoodCode IS NULL
  OR FoodCode = vc.FoodCode)
  AND (ListUserId IS NULL
  OR FIND_IN_SET(vc.UserId, ListUserId))
  AND (OrderId IS NULL
  OR OrderId = vc.OrderId)
  ORDER BY vc.CreatedDate DESC;
END
$$

--
-- Create procedure `Proc_Comment_Delete`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Comment_Delete (IN ListCommentId text)
BEGIN
  DELETE
    FROM Comment
  WHERE FIND_IN_SET(CommentId, ListCommentId);
END
$$

--
-- Create procedure `Proc_Action_Get`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Proc_Action_Get ()
BEGIN
  SELECT
    *
  FROM Action;
END
$$

DELIMITER ;

-- 
-- Dumping data for table category
--
INSERT INTO category VALUES
('12b28924-2015-5d35-f1ff-0bf8e460a224', 'CM-001', 'Chicken', 'https://pathstorage1.blob.core.windows.net/files/chicken.png', 'Voluptatem voluptas vel. Et libero. Iste nulla. Voluptatem fugiat. Fugit.', '2022-04-17 10:05:52', NULL, '2022-05-03 11:11:17', NULL, NULL, NULL),
('1ddeb8b3-47c4-3566-f0ff-0bf8e460a224', 'CM-003', 'Kids Menu', 'https://pathstorage1.blob.core.windows.net/files/kidsmenu.png', 'Suscipit consequatur eveniet. Vitae et eum blanditiis? Incidunt iste.', '2022-04-12 00:00:18', NULL, '2022-04-16 03:02:31', NULL, NULL, NULL),
('28fac2a7-3b08-4b3b-d8b4-8d4600c9080b', 'CM-004', 'Combo', 'https://pathstorage1.blob.core.windows.net/files/combo.png', 'Commodi eum et amet unde. Adipisci et similique repellat. Pariatur dolor.', '2022-04-16 04:02:41', NULL, '2022-04-16 08:53:13', NULL, NULL, NULL),
('2d46bab3-4f6b-69a8-71b0-22cff29e2663', 'CM-007', 'Pizza', 'https://pathstorage1.blob.core.windows.net/files/smallpizza.png', 'Vitae corrupti culpa in. Veniam nulla ut eum! Animi voluptates.', '2022-04-15 16:43:08', NULL, '2022-04-18 13:51:55', NULL, NULL, NULL),
('4037b27c-61ef-3836-e061-aec1e6494175', 'CM-008', 'Cold Drink', 'https://pathstorage1.blob.core.windows.net/files/5-1.png', 'Ea fuga neque et aut. Error dolores! Sed deleniti. Rerum odio. This is Cold Drink', '2022-04-16 20:08:24', NULL, '2022-06-30 00:20:30', NULL, NULL, NULL),
('4ac29d56-58aa-17b5-5865-a41d0e078d49', 'CM-005', 'Pasta', 'https://pathstorage1.blob.core.windows.net/files/pasta.png', 'Aperiam itaque voluptatem dolor molestiae.', '2022-04-12 01:51:14', NULL, '2022-05-02 23:56:56', NULL, NULL, NULL),
('6cb25a5f-3341-5f1d-d9b4-8d4600c9080b', 'CM-002', 'Burger', 'https://pathstorage1.blob.core.windows.net/files/burger.png', 'Voluptas minima. Sed aut est quisquam! Ut qui laboriosam natus eaque.', '2022-04-12 18:35:18', NULL, '2022-04-19 05:58:40', NULL, NULL, NULL),
('7b65a1d7-52df-5fb9-16cf-1ab46ebdb0f4', 'CM-006', 'Hot Drinks', 'https://pathstorage1.blob.core.windows.net/files/drinks.png', 'Nulla labore deserunt neque et. Sed voluptatem. Eos error! Illo aut.', '2022-04-12 00:00:44', NULL, '2022-05-03 00:02:09', NULL, NULL, NULL);

-- 
-- Dumping data for table size
--
INSERT INTO size VALUES
('e78bbed3-cdc4-11ec-a67b-98e7430c3bdb', 'S', True, 'SC-001', NULL, NULL, NULL, NULL),
('e78bf4ea-cdc4-11ec-a67b-98e7430c3bdb', 'M', True, 'SC-002', NULL, NULL, NULL, NULL),
('e78bf8fc-cdc4-11ec-a67b-98e7430c3bdb', 'L', True, 'SC-003', NULL, NULL, NULL, NULL),
('e78bfa6a-cdc4-11ec-a67b-98e7430c3bdb', 'XL', True, 'SC-004', NULL, NULL, NULL, NULL);

-- 
-- Dumping data for table subject
--
INSERT INTO subject VALUES
('00652', 'I59', 'Elijah2019', '45821', '2010-02-21 18:49:53', 'Dee Burrows', '2007-11-21 07:35:19', 'Douglas Abrams'),
('02410', 'Y', 'Venegas26', '69259', '1970-01-01 00:01:22', 'Magda Croteau', '1972-04-25 11:02:39', 'Lizbeth Grubb'),
('04255', '7A', 'Becky1957', '07033', '1970-01-01 00:01:28', 'Nathanael Berger', '1997-12-05 06:51:08', 'Ada Anglin'),
('04477', 'P65I83', NULL, '43080', NULL, NULL, '2011-08-31 02:30:09', 'Ada Wyman'),
('04492', 'F0E2', 'Shoshana4', '45742', '1971-06-22 14:22:39', 'Rudy Abel', NULL, NULL),
('04595', '8', 'Craft2019', '75797', '2013-05-05 22:37:06', 'Dallas Marrero', '2007-03-29 08:17:13', 'Terrell Huggins'),
('07584', 'B6R6', 'Brittanie2002', '40787', '2014-04-18 06:46:46', 'Jetta Mckenna', '1970-01-01 00:00:01', 'Faye Lennon'),
('11976', 'RS5L', 'Shavonne9', '69077', '2020-11-02 07:51:58', 'Shavonne Anthony', '1970-01-01 00:00:08', 'Cammy Akins'),
('12717', '74EH', 'Shira135', '37807', '1970-03-12 14:48:49', 'Allen Staton', '1995-09-18 10:17:56', 'Leopoldo Alicea'),
('13331', '2S0', 'Isreal79', '57680', '1992-03-22 16:05:48', 'Barney Bohannon', '1983-03-15 07:32:08', 'Herschel Pinkston'),
('14311', '2', 'Noemi1', '33015', '1972-02-05 09:58:01', 'Merrill Acker', '1970-01-01 00:00:08', 'Fredrick Reis'),
('15533', '9J96B', 'Adalberto461', '56060', '1981-11-29 15:01:30', 'Ariel Albers', '1981-02-27 13:27:03', 'Shawana Mauro'),
('16655', '30H19', 'Adalberto42', '24813', '1970-01-01 00:00:36', 'Rey Rollins', '1992-04-13 05:17:24', 'Randee Beyer'),
('18523', 'V', 'Gladis741', '23724', '1970-01-01 00:01:34', 'Daniele Wasson', '1970-01-01 00:00:36', 'Willow Weis'),
('19552', '4', NULL, '17077', NULL, NULL, '1970-01-01 00:14:22', 'Abraham Haynes'),
('24446', '149QF93198P', 'Turner2003', '57696', '1988-12-15 19:04:52', 'Abby Tuttle', '2014-08-08 12:02:17', 'Oscar Odell'),
('28366', '8G30', 'Alton54', '01660', '1970-01-01 00:00:22', 'Willia Hogue', '1984-01-24 23:05:03', 'Aurelio Navarro'),
('28811', 'IK6Q', 'Will337', '73840', '1970-01-01 00:13:47', 'Bradley Rickard', '1984-06-25 20:50:54', 'Marcellus Chu'),
('28892', 'EK', 'Malika55', '51926', '2019-12-02 14:43:12', 'Dallas Aquino', NULL, NULL),
('30475', 'LMOV', 'Sharleen851', '34207', '1970-01-01 01:44:45', 'Ezequiel Crane', '1999-05-16 11:24:23', 'Garrett Gonzales'),
('31928', 'XUK', 'Angulo164', '63684', '1970-01-01 00:00:34', 'Carlos Staton', '1975-10-01 03:42:51', 'Jesse Willingham'),
('35159', '2', 'Ayako397', '69066', '1971-09-05 09:45:31', 'Ahmad Tremblay', '1974-11-27 22:25:44', 'Marlena Caudill'),
('36058', 'M72U4586GV', 'Adelina45', '77757', '1970-01-01 00:00:09', 'Arnoldo Adams', '1977-06-20 11:21:24', 'Harland Garris'),
('41473', 'HF809QEX0H', 'Davison2005', '03369', '2022-03-18 02:20:23', 'Garland Garris', NULL, NULL),
('43935', '4S', 'Bryan511', '25367', '1970-01-01 00:00:53', 'Nova Ricci', '2000-12-29 09:50:21', 'Kelley Aldrich'),
('47399', '3', 'Abdul2005', '50850', '2000-11-30 22:37:22', 'Macy Abbott', '2006-04-23 02:50:07', 'Maria Akers'),
('48173', 'W05JU2645S864E061UA1', 'Robt89', '43422', '1996-03-06 18:59:41', 'Melita Rasmussen', '2001-06-01 14:28:39', 'Dominique Preston'),
('55723', 'K', 'Ada44', '46958', '1970-01-01 00:00:13', 'Idella Swafford', '2002-11-27 08:27:55', 'Leona Clarke'),
('56763', '9', 'Leigha642', '91944', '1970-01-01 01:02:08', 'Tim Amador', '2002-07-08 00:14:20', 'Darryl Irving'),
('60129', 'B4', 'Merilyn648', '94674', '1999-07-28 14:54:50', 'Rayna Amos', '2012-07-26 09:38:48', 'Ahmed Sutter'),
('60477', '9', 'Randolph942', '84746', '1970-01-01 00:32:50', 'Olene Oneill', '1989-02-02 22:38:14', 'Kaycee Paulson'),
('60750', '1', 'Colby5', '02390', '1970-06-28 18:50:16', 'Adelina Mcneal', '1972-05-17 11:53:22', 'John Laster'),
('61952', 'U356O', 'Tamekia1988', '88628', '1971-05-19 21:12:42', 'Alphonse Baca', '1996-04-16 21:51:56', 'Stormy Ocampo'),
('66493', 'O5', NULL, '42362', NULL, NULL, '1998-05-17 13:59:13', 'Josiah Steffen'),
('67118', '7ZZ0B72U0', 'Abney877', '05574', '1987-08-11 10:43:14', 'Elbert Horner', NULL, NULL),
('68713', '1T0YU', 'Coronado8', '96937', '1970-01-01 00:05:18', 'Reinaldo Cartwright', '2002-10-05 23:28:44', 'Erik Torrence'),
('71247', 'R4S', 'Aponte738', '99549', '2011-08-23 18:14:57', 'Shantell Benner', '2001-11-14 00:09:12', 'Adam Hoover'),
('73054', 'Q', 'Brooks6', '31814', '1987-04-17 17:58:22', 'Albertina Browning', '2014-05-05 13:50:20', 'Lissette Burkhart'),
('73622', 'L0', 'Zackary1', '13432', '1977-10-31 12:54:03', 'Adelaida Baumgartner', '1970-01-01 00:15:59', 'Louise Farley'),
('76154', 'D', 'Antonio2009', '53075', '2020-04-27 18:37:26', 'Ilda Holley', '2002-10-04 23:09:39', 'Alfredo Grover'),
('77700', '9', 'Lavon2015', '46396', '2003-06-01 06:29:43', 'Jamar Rector', '1998-02-20 18:57:01', 'Addie Damon'),
('81264', 'DJYP5G5', NULL, '93644', NULL, NULL, '1997-12-01 05:13:23', 'Jeanett Bannister'),
('87185', 'B6RF', NULL, '03897', NULL, NULL, '2017-11-06 20:28:12', 'Mark Peeples'),
('90008', 'ZF8A18989CQN', 'Bailey131', '79717', '1970-10-07 22:40:47', 'Willa Blackburn', '2008-03-16 20:37:53', 'Tricia Salgado'),
('92860', '6A74M39H', 'Rodrick52', '09482', '2004-12-08 18:24:04', 'Andrea Adkins', '1970-01-01 01:04:22', 'Carmelita Hughey'),
('93951', '01', 'Holbrook959', '70995', '2013-11-09 05:43:27', 'Alethea Barrows', NULL, NULL),
('94527', 'O0PU2', 'Croteau2008', '03013', '2015-05-24 14:04:27', 'Galen Abreu', '1989-09-12 08:43:52', 'Adrian Matthew'),
('96280', 'UD', 'Adolph1983', '82061', '2002-03-08 19:54:21', 'Ross Folsom', '2009-08-16 16:31:41', 'Whitney Aguilar'),
('98556', '6J10T', 'Azalee1973', '12558', '1970-01-01 01:36:39', 'Dexter Altman', '1970-01-01 00:00:05', 'Bridgett Todd'),
('98577', '82A73UC618', 'Alexander1985', '79904', '2002-04-29 18:38:28', 'Sylvia Caudill', '1973-11-28 11:34:45', 'Caleb Maynard');

-- 
-- Dumping data for table action
--
INSERT INTO action VALUES
('3304dddb-1b72-607f-25c2-579daad24557', 'AC-001', 'Xem', '2022-04-19 02:38:30', NULL, '2003-12-08 20:06:01', NULL),
('506acf1e-5331-67a9-0d77-d9ebc53aac3d', 'AC-002', 'Xóa', '2022-04-19 01:19:23', NULL, '2016-12-08 12:16:53', NULL),
('57cdf8c4-47e3-5560-7e41-c1ec321fe728', 'AC-009', 'Thêm', '2022-04-19 20:17:57', NULL, '2007-01-14 03:31:21', NULL),
('6c80a684-1cb5-41af-ff34-60b3ebf808a9', 'AC-008', 'Sửa', '2022-04-19 03:08:04', NULL, '1990-10-25 14:11:44', NULL);

-- 
-- Dumping data for table discount
--
INSERT INTO discount VALUES
('1e73088a-f9c3-11ec-bd60-98e7430c3bdb', 'DC-005', 'Giảm giá cuối tuần', 50000, 10, '2022-06-24 10:00:00', '2022-07-28 17:00:00', NULL, '2022-07-02 11:54:56', NULL, '2022-07-02 11:54:56', NULL, 0),
('5c400027-ef31-11ec-946d-98e7430c3bdb', 'DC-001', 'Giảm giá sinh nhật app', 500000, 15, '2022-06-18 17:39:04', '2022-06-18 17:39:04', NULL, '2022-06-19 01:06:22', NULL, '2022-06-19 01:40:08', NULL, 0),
('98339e83-f17c-11ec-bd60-98e7430c3bdb', 'DC-003', 'Ưu đãi dành cho khách hàng mới', 100000, 100, NULL, NULL, NULL, '2022-06-21 23:09:57', NULL, '2022-06-21 23:09:57', NULL, 1),
('98e8b568-f565-11ec-bd60-98e7430c3bdb', 'DC-004', 'Giảm giá cuối tuần', 50000, 10, '2022-06-24 17:00:00', '2022-06-28 17:00:00', NULL, '2022-06-26 22:35:24', NULL, '2022-06-26 22:35:24', NULL, 0),
('ef2a07d0-ef81-11ec-946d-98e7430c3bdb', 'DC-002', 'Giảm giá sinh nhật app', 50000, 15, '2022-06-18 17:39:04', '2022-06-18 17:39:04', NULL, '2022-06-19 10:43:08', NULL, '2022-06-19 10:43:08', NULL, 0);

-- 
-- Dumping data for table food
--
INSERT INTO food VALUES
('30fd478f-c60b-4df5-a9ae-1b6985de3149', '2d46bab3-4f6b-69a8-71b0-22cff29e2663', 'Supreme Pizza', 'FC-003', 'Although the legendary Double Burger really needs no introduction, please allow us… Tucked in between three soft buns are two all-beef patties, cheddar cheese, ketchup, onion, pickles and iceberg lettuce. Hesburger’s own paprika and cucumber mayonnaise add the crowning touch. Oh baby!\n\nIngredients: Dr. Praeger’s Black Bean Burger, Focaccia bun, Balsamic Vinaigrette, Pesto, Tomato, Swiss Cheese', 'Ricotta, sun dried tomatoes, garlic, mozzarella cheese, topped with lightly drizzled red sauce, pesto, and fresh basil', NULL, '98e8b568-f565-11ec-bd60-98e7430c3bdb', 0, 0, 'https://pathstorage1.blob.core.windows.net/files/chicken-hawaii.png', '2022-05-15 11:19:54', NULL, '2022-06-27 00:09:53', NULL, '353675f2-73c0-55a3-bc5d-100ccbc59147,65f88212-5922-6619-4ea4-e0d1ddfbcf7c'),
('d6ace9b8-b2bf-413f-a2aa-96a6ceed1f36', '2d46bab3-4f6b-69a8-71b0-22cff29e2663', 'Vegge Lover', 'FC-004', 'Although the legendary Double Burger really needs no introduction, please allow us… Tucked in between three soft buns are two all-beef patties, cheddar cheese, ketchup, onion, pickles and iceberg lettuce. Hesburger’s own paprika and cucumber mayonnaise add the crowning touch. Oh baby!\n\nIngredients: Dr. Praeger’s Black Bean Burger, Focaccia bun, Balsamic Vinaigrette, Pesto, Tomato, Swiss Cheese', 'Ricotta, sun dried tomatoes, garlic, mozzarella cheese, topped with lightly drizzled red sauce, pesto, and fresh basil', NULL, NULL, 0, 0, 'https://pathstorage1.blob.core.windows.net/files/17-1.png', '2022-05-15 11:28:08', NULL, '2022-05-15 11:34:41', NULL, '353675f2-73c0-55a3-bc5d-100ccbc59147,65f88212-5922-6619-4ea4-e0d1ddfbcf7c'),
('e6c3a1a0-9415-496f-9f6d-9ca13c6ba0c8', '12b28924-2015-5d35-f1ff-0bf8e460a224', 'Đùi gà rán', 'FC-001', 'Although the legendary Double Burger really needs no introduction, please allow us… Tucked in between three soft buns are two all-beef patties, cheddar cheese, ketchup, onion, pickles and iceberg lettuce. Hesburger’s own paprika and cucumber mayonnaise add the crowning touch. Oh baby!\n\nIngredients: Dr. Praeger’s Black Bean Burger, Focaccia bun, Balsamic Vinaigrette, Pesto, Tomato, Swiss Cheese', 'Crispy bacon, tasty ham, pineapple, onion and stretchy mozzarella, finished with a BBQ swirl.', NULL, NULL, 0, 0, 'https://pathstorage1.blob.core.windows.net/files/chicken-2.jpg', '2022-05-15 11:01:39', NULL, '2022-05-15 11:03:18', NULL, ''),
('f0155362-6aaa-4c20-9ee0-7add95a29e2e', '12b28924-2015-5d35-f1ff-0bf8e460a224', 'Đùi gà sốt chua ngọt', 'FC-002', 'Although the legendary Double Burger really needs no introduction, please allow us… Tucked in between three soft buns are two all-beef patties, cheddar cheese, ketchup, onion, pickles and iceberg lettuce. Hesburger’s own paprika and cucumber mayonnaise add the crowning touch. Oh baby!\n\nIngredients: Dr. Praeger’s Black Bean Burger, Focaccia bun, Balsamic Vinaigrette, Pesto, Tomato, Swiss Cheese', 'Crispy bacon, tasty ham, pineapple, onion and stretchy mozzarella, finished with a BBQ swirl.', NULL, NULL, 0, 0, 'https://pathstorage1.blob.core.windows.net/files/chicken-2.png', '2022-05-15 11:15:37', NULL, '2022-05-15 11:15:37', NULL, '');

-- 
-- Dumping data for table fooddetail
--
INSERT INTO fooddetail VALUES
('56620dc4-d408-11ec-bf1a-98e7430c3bdb', 'd6ace9b8-b2bf-413f-a2aa-96a6ceed1f36', 'e78bbed3-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 120000, '2022-05-15 11:34:41', NULL, '2022-05-15 11:34:41', NULL),
('5663c8cf-d408-11ec-bf1a-98e7430c3bdb', 'd6ace9b8-b2bf-413f-a2aa-96a6ceed1f36', 'e78bf4ea-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 170000, '2022-05-15 11:34:41', NULL, '2022-05-15 11:34:41', NULL),
('67e3e7f7-f572-11ec-bd60-98e7430c3bdb', '30fd478f-c60b-4df5-a9ae-1b6985de3149', 'e78bf8fc-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 180000, '2022-06-27 00:07:05', NULL, '2022-06-27 00:09:53', NULL),
('76d21a1a-d407-11ec-bf1a-98e7430c3bdb', '30fd478f-c60b-4df5-a9ae-1b6985de3149', 'e78bbed3-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 120000, '2022-05-15 11:28:26', NULL, '2022-06-27 00:09:53', NULL),
('76d2490b-d407-11ec-bf1a-98e7430c3bdb', '30fd478f-c60b-4df5-a9ae-1b6985de3149', 'e78bf4ea-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 150000, '2022-05-15 11:28:26', NULL, '2022-06-27 00:09:53', NULL),
('acb0ea22-d405-11ec-bf1a-98e7430c3bdb', 'f0155362-6aaa-4c20-9ee0-7add95a29e2e', 'e78bbed3-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 35000, '2022-05-15 11:15:37', NULL, '2022-05-15 11:15:37', NULL),
('acb0fd37-d405-11ec-bf1a-98e7430c3bdb', 'f0155362-6aaa-4c20-9ee0-7add95a29e2e', 'e78bf4ea-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 45000, '2022-05-15 11:15:37', NULL, '2022-05-15 11:15:37', NULL),
('f3c96c9e-d403-11ec-bf1a-98e7430c3bdb', 'e6c3a1a0-9415-496f-9f6d-9ca13c6ba0c8', 'e78bbed3-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 30000, '2022-05-15 11:03:18', NULL, '2022-05-15 11:03:18', NULL),
('f3c9a201-d403-11ec-bf1a-98e7430c3bdb', 'e6c3a1a0-9415-496f-9f6d-9ca13c6ba0c8', 'e78bf4ea-cdc4-11ec-a67b-98e7430c3bdb', NULL, NULL, 40000, '2022-05-15 11:03:18', NULL, '2022-05-15 11:03:18', NULL);

-- 
-- Dumping data for table ratingsheet
--
INSERT INTO ratingsheet VALUES
('01372', 'Sidney644', '3X', True, '2016-11-01 03:15:11', 'Cathleen Abernathy', '2002-08-28 22:19:05', 'Jenee Dias'),
('02462', 'Jewell978', 'H7Y2', True, '2014-08-27 11:10:53', 'Mitzie Vega', '2016-01-14 00:13:00', 'Meryl Lemons'),
('05383', 'Jutta1996', 'J190A0', False, '2002-05-24 01:06:03', 'Anthony Ledbetter', '2010-04-22 23:09:40', 'Lorie Forsythe'),
('06854', 'Byron2015', 'J', False, '2022-03-06 02:42:59', 'Antony Steel', '1975-08-02 08:05:52', 'Saul Cuellar'),
('07509', 'Darleen891', 'R', False, '1985-04-25 19:30:59', 'Mauro Blakely', '2017-09-28 07:15:53', 'Shanell Applegate'),
('13653', 'Belanger2006', '2', True, '1976-10-20 01:17:00', 'Gus Boggs', '2010-08-24 23:13:54', 'Mei Roland'),
('15379', 'Synthia121', 'H1G2', True, '1994-04-28 19:58:04', 'Deandra Abernathy', '2010-04-04 01:35:00', 'Stanton Acker'),
('16490', NULL, 'MC2', NULL, NULL, NULL, '2018-08-27 20:00:13', 'Billy Mccaffrey'),
('16683', 'Nella2019', 'QAUP', False, '2004-01-23 15:14:24', 'Tad Moore', '1970-01-01 00:05:29', 'Agustina Askew'),
('16723', 'Twyla2010', 'JT', False, '2002-04-13 18:30:14', 'Aisha Bowen', '1997-08-21 06:26:05', 'Fidelia Nieto'),
('17138', 'Jacinto9', '0', False, '2002-05-24 14:03:58', 'Charlene Cummings', '1977-06-21 09:16:07', 'Ewa Bivens'),
('18423', 'Clawson1957', '8', True, '1970-01-01 00:00:02', 'Lurlene Belanger', '1986-04-12 06:21:32', 'Amado Weeks'),
('19130', 'Travis2011', 'P7Y', False, '2020-10-02 17:55:57', 'Abraham Borges', '2021-11-11 08:04:48', 'Lucienne Counts'),
('20429', 'Dias2', '5R', False, '1998-07-03 09:11:27', 'Adaline Melancon', '1970-01-01 00:01:23', 'Otto Baumgartner'),
('20915', 'Vance744', '3B15RD9C6T36D', True, '1988-01-10 12:10:17', 'Arturo Hastings', '1991-11-24 01:56:37', 'Devorah Benner'),
('22985', 'Magdalen8', '5', True, '2000-08-05 17:35:49', 'Magdalen Abreu', '1970-01-01 00:01:10', 'Adah Strother'),
('28884', 'Ted7', 'C2V1', True, '1987-07-03 04:55:34', 'Ruthann Reno', '2015-02-01 19:08:09', 'Pamala Leslie'),
('33603', 'Basil1989', '7ET6673XN706TCB', True, '1987-07-30 20:50:06', 'Blair Andrews', NULL, NULL),
('35409', 'Tobie1988', '5', False, '1996-07-01 20:18:15', 'Vance Alston', '1970-01-01 00:03:56', 'Joey Vick'),
('35609', 'Angelic953', '82F', False, '2004-05-24 07:12:28', 'Katharyn Boucher', '1971-06-09 11:31:38', 'Donna Albrecht'),
('39033', NULL, 'IH8E', NULL, NULL, NULL, '1997-12-10 03:14:14', 'Jerome Hoy'),
('42739', 'Alvaro2029', 'M1582J6L9RG30', False, '1977-05-19 03:31:56', 'Deonna Fitzgerald', '1984-06-20 07:51:41', 'Josue Colley'),
('52050', 'Adrienne1961', '91Y2OZH0', True, '1970-01-01 02:01:11', 'Erin Burchett', '1970-01-01 01:31:49', 'Norman Leone'),
('54263', 'Callahan1985', '9', False, '2019-02-13 09:21:04', 'Therese Anthony', '2008-11-10 19:01:59', 'Lenita Amos'),
('54848', 'Michal546', '9', False, '1986-10-29 03:07:34', 'Alonzo Andrews', '1989-06-01 18:00:29', 'Bridgett Begay'),
('58209', 'Belinda2016', 'U79IP', True, '1993-10-13 16:37:43', 'Adelaida Browder', '2020-01-31 22:50:42', 'Dusty Levesque'),
('63879', 'Christopher2004', '8', True, '1979-06-13 01:24:12', 'Cleo Sell', '1994-01-07 17:46:58', 'Tobie Aguiar'),
('65001', 'Alysha3', 'N', True, '2008-09-30 03:06:25', 'Maira Abel', '1986-09-07 08:19:50', 'Micah Barrow'),
('65354', NULL, '56', NULL, NULL, NULL, '1970-01-01 00:01:05', 'Jospeh Storey'),
('65937', 'Aiello343', 'S', True, '1970-01-01 00:02:42', 'Joseph Pederson', NULL, NULL),
('68047', 'Escalante485', '2', False, '2006-08-09 17:28:53', 'Lidia Cranford', NULL, NULL),
('68367', 'Whitt53', '828YY', True, '1973-10-18 04:46:16', 'Aleen Barnes', '1988-04-26 10:57:36', 'Perry Baines'),
('68590', 'Fidel2019', 'X8BV48V7', True, '1970-01-01 00:01:09', 'Genevive Riddle', '1970-01-01 00:00:03', 'Tran Godfrey'),
('69255', 'Byrnes1979', 'O', False, '1970-01-01 00:00:03', 'Judson Orta', '1970-01-01 00:00:09', 'Kirby Almeida'),
('71678', 'Gustavo2006', '5Q7ZM', True, '2009-07-06 12:16:59', 'Temika Westfall', NULL, NULL),
('71772', 'Boston75', 'P73AJJG077TKE3BM2K9', False, '1998-09-23 03:35:26', 'Patricia Thomsen', '1970-01-01 02:22:04', 'Horacio Thrash'),
('72232', 'Phelps2021', '9G', False, '1970-01-01 01:25:23', 'Kizzy Denton', NULL, NULL),
('75027', 'Eartha2', '5S1794', True, '1971-08-24 22:43:36', 'Clay Trammell', '1970-01-01 00:02:57', 'Kelley Sylvester'),
('75576', 'Bryan2011', '3', False, '1970-01-01 00:00:25', 'Adam Segura', '1977-03-15 12:22:17', 'Adelaida Segura'),
('78141', 'Leonard775', '6', True, '2005-05-20 03:52:48', 'Vivan Covert', '1978-07-02 16:02:11', 'Aline Alfaro'),
('78972', 'Weston2017', 'N', False, '1970-01-01 00:00:07', 'Teofila Davenport', '1979-07-17 18:25:35', 'Anibal Douglas'),
('80677', 'Stefanie492', '40', False, '1993-08-28 12:38:47', 'Rusty Paterson', '1970-01-01 00:00:45', 'Abigail Cornwell'),
('82689', 'Ricardo16', 'G', False, '1985-03-07 04:23:59', 'Emory Coffman', '1970-01-01 02:38:11', 'Alton Richards'),
('83094', 'Gladys93', '58ZVH2C', False, '1992-01-07 23:50:24', 'Mack Noriega', '1970-01-01 00:06:49', 'Adolph Acker'),
('83627', NULL, '5049KW4C36', NULL, NULL, NULL, '1999-09-19 17:44:40', 'Orville Higgins'),
('85889', NULL, '97RN', NULL, NULL, NULL, '1979-10-07 11:23:32', 'Dallas Barrow'),
('89468', 'Scott699', 'U3', True, '1994-01-07 08:16:31', 'Jewell Wright', '1970-01-01 01:00:46', 'Seth Spriggs'),
('91648', 'Adolph925', 'CP600B', True, '2020-06-18 23:19:37', 'Hassie Callender', '2015-08-12 22:15:32', 'Corrie Stevenson'),
('96381', 'Davis2008', 'M5DHU42X8', False, '1970-01-01 00:00:03', 'Elwood Briseno', '1970-01-01 01:41:43', 'Adelina Barker'),
('96505', 'Grady1998', 'V3', True, '1993-02-15 19:51:49', 'Hipolito Zimmerman', '1974-06-05 14:59:54', 'Antoine Montalvo');

-- 
-- Dumping data for table user
--
INSERT INTO user VALUES
('18f58afb-f53f-11ec-bd60-98e7430c3bdb', 'phamvan', NULL, '6344AE6B48811C0FA2DB609FFF8F21DC', NULL, '089514788', '357 Bạch Mai', NULL, NULL, NULL, False, False, NULL, 0, NULL, '2022-06-26 17:59:49', '2022-06-26 17:59:49', NULL),
('34b4a023-f542-11ec-bd60-98e7430c3bdb', 'dhlinh', NULL, '6344AE6B48811C0FA2DB609FFF8F21DC', NULL, '089753589', '156 Phương Liệt, Hà Nội', NULL, NULL, NULL, False, False, NULL, 0, NULL, '2022-06-26 18:22:04', '2022-06-26 18:22:04', NULL),
('377a154c-4e7c-4476-9d8f-7e1f7da4ef97', 'duyenpham', 'UC-003', '0DB7E5E6F41B2FE52753DD14E99AA974', 'Breanna Mclendon', '(325) 094-0730', '1753 Pine Tree Hwy, Plaza Building, Dover, DE, 74349', NULL, 'Efrain_Danner@example.com', 2, False, True, 'Chef', 2, NULL, '2022-04-06 03:14:47', '2022-04-07 06:28:06', NULL),
('4a6320b9-439e-6696-0ba4-f0dbd71bf0ad', 'duyen.pt', 'UC-001', '0DB7E5E6F41B2FE52753DD14E99AA974', 'Stefania Skipper', '(764) 450-7595', '17 N Oak Lane, First Security Building, Baton Rouge, LA, 82466', NULL, 'Skipper@example.com', 1, True, True, 'Admin', 1, NULL, '2022-04-08 14:44:31', '2022-04-05 09:43:27', NULL),
('667988e5-f53f-11ec-bd60-98e7430c3bdb', 'nttham', NULL, '12345678@Abc', NULL, '0789568089', '156 Phương Liệt, Hà Nội', NULL, NULL, NULL, False, False, NULL, 0, NULL, '2022-06-26 18:01:59', '2022-06-26 18:01:59', NULL),
('67d11449-f542-11ec-bd60-98e7430c3bdb', 'ttnhung', NULL, '6344AE6B48811C0FA2DB609FFF8F21DC', NULL, '0895456178', '154 Phương Liệt, Hà Nội', NULL, NULL, NULL, False, False, NULL, 0, NULL, '2022-06-26 18:23:30', '2022-06-26 18:23:30', NULL),
('756e18ee-7f9c-33f8-0878-3ccbef6739df', 'ptduyen', 'UC-002', '0DB7E5E6F41B2FE52753DD14E99AA974', 'Morris Bartlett', '(691) 333-7270', '2000 Front Ct, 257 Towers Bldg, Springfield, Illinois, 70064', NULL, 'Crowley761@example.com', 0, False, True, 'Chef', 3, NULL, '2022-04-17 18:37:30', '2022-04-05 00:00:45', NULL),
('756e18ef-7f9c-33f8-0878-3ccbef6739df', 'phamduyen', NULL, '0DB7E5E6F41B2FE52753DD14E99AA974', 'Morris Bartlett', '(691) 333-7271', '2000 Front Ct, 257 Towers Bldg, Springfield, Illinois, 70064', NULL, 'Crowley761@example.com', 0, False, False, '', 3, NULL, '2022-04-17 18:37:30', '2022-06-28 22:52:34', NULL),
('fbf5747b-f542-11ec-bd60-98e7430c3bdb', 'vtlan', NULL, '6344AE6B48811C0FA2DB609FFF8F21DC', NULL, '0789456123', '68 Gốc Đề, Hà Nội', NULL, NULL, NULL, False, False, NULL, 0, NULL, '2022-06-26 18:27:38', '2022-06-26 18:27:38', NULL);

-- 
-- Dumping data for table topping
--
INSERT INTO topping VALUES
('1a79e25d-15ed-25af-66ef-5e83c2936996', 'Chân trâu ', 'TC-002', 8042, NULL, '2022-04-14 09:12:05', NULL, NULL, NULL),
('353675f2-73c0-55a3-bc5d-100ccbc59147', ' Cá viên ', 'TC-004', 8310, NULL, '2022-04-09 06:06:01', NULL, '2022-04-14 03:13:10', NULL),
('5aca2a5b-3d14-4908-d4a8-8ebdaf5d2b61', ' Thạch ', 'TC-003', 6956, NULL, '2022-04-04 00:15:43', NULL, '2022-04-18 19:22:01', NULL),
('65f88212-5922-6619-4ea4-e0d1ddfbcf7c', ' Viên mực ', 'TC-007', 8182, NULL, NULL, NULL, '2022-04-09 23:04:22', NULL),
('67e92ae7-240a-38a3-0b2e-04726f235b01', ' Tôm viên ', 'TC-008', 7288, NULL, '2022-04-15 16:01:15', NULL, '2022-04-04 00:15:59', NULL),
('6a362a09-24c3-22e2-2479-822354bbf41a', ' Sủi cảo', 'TC-006', 9338, NULL, '2022-04-19 23:47:05', NULL, '2022-04-04 00:00:04', NULL);

-- 
-- Dumping data for table slider
--
INSERT INTO slider VALUES
('0c99a8bd-d130-11ec-a67b-98e7430c3bdb', 'https://pathstorage1.blob.core.windows.net/files/pasta.png', 'http://localhost:8080/user/shop', False, 'For sale: 15%.\nA mighty meaty double helping of all the reasons you love our burger.', 'NEW PHENOMENON BURGER TASTE', 'Fast Food Meals', 'SC-002', -919057861, '2022-05-11 20:41:24', NULL, '2022-05-11 20:52:43', NULL),
('b5f47feb-d068-11ec-a67b-98e7430c3bdb', 'https://pathstorage1.blob.core.windows.net/files/burger.png', 'http://localhost:8080/user/shop', False, 'A mighty meaty double helping of all the reasons you love our burger.', 'NEW PHENOMENON BURGER TASTE', 'Hot Fresh', 'SC-001', -919057861, '2021-12-17 22:37:24', NULL, '2022-05-10 22:04:39', NULL);

-- 
-- Dumping data for table question
--
INSERT INTO question VALUES
('00418', '89468', 'G3', 'Alva659', '6493A8P0TLPBI5SYDZ1F9TENU852RRC13388H732H69QMRF5XMV348793270VEWP', True, '1970-07-29 21:43:41', 'Francis Fairbanks', '1970-01-01 00:00:10', 'Idell Sasser'),
('02292', '68367', 'SDQH15QF', 'Abdul419', '55P1', False, '1975-10-08 17:11:56', 'Eun Crutcher', '2003-12-08 07:19:37', 'Amos Janssen'),
('03700', '71678', '690', 'Maximina495', '6G', False, '1970-01-01 00:00:19', 'Robbyn Cass', '1970-01-01 00:00:33', 'Adela Rigby'),
('04975', '28884', '63', 'Tuyet322', 'A460ZD4OK2A0H3754QRRE494E40X4', True, '1970-01-01 00:01:26', 'Robbie Stanley', '1970-01-01 00:00:03', 'Mark Bogan'),
('06523', '42739', '9X08', NULL, 'ST99Q10IK3CFXOHPZ8I7A3U2JV49BR7F21Z2Q71885V5VN502FW99206Q0R8V', NULL, NULL, NULL, '1970-01-01 00:05:32', 'Adelaida Fultz'),
('07334', '16490', '96', 'Peggie1962', 'CELB27JGJ1485T', True, '1970-01-01 00:00:08', 'Lindsey Bautista', '2012-10-15 04:50:21', 'Abel Adler'),
('08921', '33603', 'D', 'Crump56', '16JM9', True, '1975-05-07 02:22:47', 'Johnnie Pinson', '1990-08-11 18:57:40', 'Adelaida Abney'),
('10411', '02462', 'I5', 'Culver576', 'SI86OWU6A7GD991NQ151RN', False, '1991-02-02 16:38:30', 'Sidney Gaines', '1998-06-02 14:38:09', 'Brittani Abney'),
('11402', '42739', 'EKF27', 'Margarito1972', '66358F', False, '1979-04-22 21:31:30', 'Yolanda Cassidy', '2011-03-13 09:21:31', 'Fae Cortez'),
('20818', '16723', '9W5', 'Noel689', '7WJM0842W7A7UT46Q9X5128N132IYNE', True, '1970-01-01 02:05:10', 'Darrick Fong', '2011-03-18 23:00:48', 'Ashlie Akins'),
('21704', '75027', 'X', NULL, 'GJ2TW', NULL, NULL, NULL, '2002-04-12 12:08:33', 'Willodean Oneil'),
('22147', '15379', '6', 'Truman22', '7', True, '1970-01-01 00:08:22', 'Abbie Hunter', '1970-01-01 01:44:35', 'Jovita Story'),
('22765', '82689', 'FJ', NULL, 'E2R3X4N7H1WPTFRY0565RMEO5Q', NULL, NULL, NULL, '1974-08-29 18:59:38', 'Roy Tyner'),
('23419', '35609', 'K831NHY83', 'Somers639', '784I82M4318Z36LOY0E1M1E0Z9DAOWH9EBY8MV2T73476794S6', True, '1970-01-01 00:00:01', 'Cecelia Bohn', '1975-06-01 06:49:43', 'September Cutler'),
('24493', '68047', '1', 'Mcclain2029', '4Z4SK', True, '2020-11-10 12:01:48', 'Melany Chappell', '1994-07-08 17:07:01', 'Brady Crayton'),
('26717', '16723', 'ON6XG3BE1UH5', 'Ada1963', 'FWU9548UX6LEK74O77Q049', False, '1970-01-01 00:16:09', 'Ming Chamberlin', '1984-07-19 02:01:26', 'Allyson Arnett'),
('29346', '78141', 'H', 'Elvera1959', 'M2J5AL63K9J3XU6LO5N1645HV98FRTXJ012G32285VDD', True, '1996-06-09 09:39:51', 'Trey Dugas', '1987-09-30 04:16:48', 'Isis Rowley'),
('29753', '35409', '3A2OCN0M8', 'Darwin1958', NULL, True, '2021-02-25 07:03:03', 'Homer Shuler', NULL, NULL),
('29873', '35609', '43C22YI18KL9MRN', 'Abel1985', '0I329L5UNFKJU63360EMPX2JJF', True, '1970-01-01 00:00:03', 'Cicely Acevedo', '2003-12-17 19:59:59', 'Selene Ahrens'),
('34242', '42739', 'EQM', 'Jodi46', NULL, True, '1986-05-03 04:47:34', 'Renea Abbott', NULL, NULL),
('36519', '19130', 'I9', NULL, 'QFN3Z0WNAG', NULL, NULL, NULL, '1983-05-13 11:23:13', 'Ada Holiday'),
('38774', '39033', 'JQJ', 'Bill1957', 'PH8N24025LA804X4IDQ21XE6YT', True, '1970-01-01 00:00:08', 'Marcel Sierra', '1970-01-01 00:04:47', 'Racquel Laney'),
('39993', '63879', '0GF3', 'Acker1998', NULL, True, '1970-01-01 01:42:54', 'Eduardo Elizondo', NULL, NULL),
('42308', '83094', 'G', 'Egan1998', '717255YHS', True, '1970-01-01 00:16:27', 'Adela Linton', '1977-06-15 18:24:04', 'Cassi Paquette'),
('44886', '54848', '4032O399I', 'Pearlene1953', '3W89V0A0', False, '1970-01-01 01:24:20', 'Lonnie Abreu', '1994-01-04 17:02:07', 'Kaye Gilbert'),
('50699', '58209', '72IMO1Z2FU130NXX22EA', 'Kaiser2021', 'K', True, '2009-12-18 02:17:09', 'Lupe Loftis', '1979-11-19 08:57:43', 'Ada Batiste'),
('51034', '72232', '6', 'Rhea1976', '891938GI902', False, '1970-01-01 00:00:07', 'Randi Sawyer', '1970-01-01 00:00:55', 'Wilbert Locke'),
('52078', '54263', '84T72J8', 'Alanna213', 'RK8RV9L45LXQ9L965K63E6G745383RD4A957M497KV2S', False, '2021-01-17 16:46:54', 'Alise Hamlin', '1981-01-12 17:59:04', 'Allen Hammett'),
('53975', '15379', '1', 'Ike2', '1121PC7D90Z5O43A20F3', False, '2011-01-18 17:20:26', 'Cole Akers', '1988-03-29 04:52:59', 'Inger Medley'),
('56594', '96381', '4II', 'Josh2027', NULL, True, '1991-02-18 08:39:31', 'Abe Carlos', NULL, NULL),
('60975', '54848', 'IN', NULL, 'ST7CAGJZNHND1ZD20TH902767', NULL, NULL, NULL, '2006-02-22 00:17:12', 'Agnes Lentz'),
('63318', '16723', '06', 'Wilbanks2011', '883TRHB7091892IVSBE', True, '1970-01-01 00:04:00', 'Roxie Slater', '2014-03-10 13:21:47', 'Dominique Killian'),
('66021', '54848', 'M7', 'Chrystal71', '5PU0JF58YYN58BP8A91PAPTG515P7E6I64', True, '2002-03-29 10:55:38', 'Frederick Carrier', '1970-01-01 02:25:39', 'Armida Alves'),
('68178', '75027', '05', 'Eliseo4', 'B648QJD464RUD5WCG0BLZW379O', False, '1999-10-05 18:19:21', 'Deedra Whitmore', '1970-01-01 00:00:28', 'Myrtle Crider'),
('73181', '69255', 'L4DTO83', 'Bernie2015', '69Z1224129G', False, '1970-01-01 00:00:34', 'Arcelia Laporte', '2018-10-30 15:25:37', 'Abbie Elliott'),
('73251', '01372', '17H', 'Jerome648', 'NH22N7050', False, '1970-01-01 00:11:21', 'Kurt Montano', '1970-01-01 00:00:27', 'Ramona Bello'),
('73344', '78141', '6', 'Halley2015', '98R807N480G33E9QWQ9CB6I74Z04MC40ITIJ317R70T898ZXEYT', False, '1987-06-02 12:29:52', 'Latesha Erwin', '1992-04-18 07:37:27', 'Albert Alarcon'),
('77994', '65937', '6', 'August1952', '67WW215425C546XTAX4UQV194V', False, '1970-01-01 00:15:42', 'Grayce Culbertson', '2008-11-07 03:36:27', 'Delta Cornell'),
('78144', '05383', 'M43CG876V6T0Q', 'Abbie257', NULL, False, '2015-07-22 23:07:10', 'Tyrone Bruner', NULL, NULL),
('78389', '33603', 'U', 'Dobson1969', '0SSG2', True, '1972-08-05 03:51:58', 'Oscar Grooms', '1982-06-06 17:50:44', 'Georgia Stroud'),
('82221', '96381', 'ZE7553', 'Nicolette1962', 'M33E840VX0XJA75JGDEI67', True, '1970-01-01 00:00:08', 'Nelson Skelton', '1970-01-01 00:47:44', 'Brittny Rouse'),
('83086', '54263', '00JB2', 'Claudio2003', '8U3E3581KQ8FE', True, '1970-01-01 00:00:02', 'Michaela Abbott', '1989-05-23 02:00:17', 'Chang Delvalle'),
('83292', '33603', 'R279K', 'Byron86', '1K8W7N0L8TH0T8QU7J1K607B64EAU7Q91SH56A', True, '2018-08-05 01:03:45', 'Harley Koontz', '1970-01-01 00:01:21', 'Erasmo Abbott'),
('86357', '96381', 'K', 'Milton1952', 'J49471DIN6729M0P7OZPHVZ888NHT8O59XD', False, '1985-01-06 05:06:16', 'Frank Hass', '1977-05-16 01:27:07', 'Ariel Atherton'),
('91793', '65354', '3969EU898VS', 'Bennie1972', '690M9YO4', False, '1985-09-24 04:31:16', 'Adah Means', '2017-01-02 02:35:27', 'Tracy Sierra'),
('93435', '68367', '6R0114', 'Kowalski2000', '3LOT17Z84AK8QRCJFQPCYG7KTD2UKH5LSTN17VNJO4CB7767AC98ZXAGATJ8LE4ULU1RL2O8005', False, '1994-07-28 22:58:19', 'Fidel Calabrese', '1990-07-23 13:02:40', 'Andera Abernathy'),
('95705', '54263', 'H95R', 'Sayre1981', 'VKP9YIZSOWPT37505587B51X', False, '1992-07-30 05:51:03', 'Broderick Varela', '1970-01-01 00:00:45', 'Randell Cantrell'),
('95777', '63879', 'E83QAC4O20', 'Royce181', '865830C', True, '1970-01-01 00:00:50', 'Lamar Mead', '1995-03-04 13:12:55', 'Freddy Duncan'),
('96576', '65354', '86DOGV', 'Adah918', '5E6INVJNK2H89UI67P3J', True, '1999-11-01 14:15:29', 'Addie Ramsey', '1983-02-13 20:59:16', 'Harlan Frantz'),
('97921', '58209', 'SR', 'Shawnda51', '8JB0D7NZ1AD0J72B23C3Y7MGK951A78DCR2DE', True, '1970-01-01 00:15:30', 'Aleida Spearman', '1970-01-01 00:20:23', 'Jeff Dobson');

-- 
-- Dumping data for table permission
--
INSERT INTO permission VALUES
('00797', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '98556', '1970-01-01 00:00:19', 'Frank Bauman', '2020-04-02 16:14:14', 'Rosita Halstead'),
('04489', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '71247', '2014-11-17 10:36:17', 'Veronika Blum', '1970-01-01 00:00:19', 'Chauncey Blunt'),
('06047', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '67118', '2002-07-19 12:07:05', 'Judy Easterling', '1970-01-01 00:13:38', 'Christena Schuler'),
('06812', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '76154', '2003-08-10 11:39:36', 'Cleveland Kraft', '1970-01-01 00:00:10', 'Carisa Matson'),
('12633', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '73622', '1970-01-01 00:01:04', 'Clint Acker', '1978-03-21 17:23:07', 'Paulette Novak'),
('12988', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '28811', NULL, NULL, NULL, NULL),
('14040', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '60750', '1979-12-21 06:39:35', 'Quentin Glaser', '2005-01-11 01:55:35', 'Weston Ybarra'),
('17225', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '96280', '1970-01-01 00:21:35', 'Verdell Tierney', '1991-10-03 11:50:11', 'Scot Morin'),
('17967', '3304dddb-1b72-607f-25c2-579daad24557', '67118', '2000-10-06 20:36:07', 'Erika Trevino', '1985-09-13 20:09:34', 'Elois Simpson'),
('22323', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '73054', '1970-01-01 01:07:04', 'Benton Christenson', NULL, NULL),
('28062', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '13331', '2010-11-14 17:53:37', 'Sterling Costa', '1992-06-09 04:37:27', 'Dianne Acevedo'),
('28314', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '61952', '1979-03-26 22:11:47', 'Roselee Allred', '1981-05-30 06:53:14', 'Luciano Acker'),
('31470', '3304dddb-1b72-607f-25c2-579daad24557', '12717', '2000-07-23 08:26:57', 'Doreatha Upton', '1970-01-01 00:00:05', 'Billye Shelton'),
('33450', '3304dddb-1b72-607f-25c2-579daad24557', '19552', '2005-05-11 08:43:26', 'Lauri Andrew', '2001-09-30 21:13:15', 'Adelaida Hudson'),
('34156', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '73622', '2011-09-24 03:25:21', 'Apolonia Milburn', '1970-01-01 00:00:29', 'Ada Estes'),
('35408', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '04477', '1970-01-01 00:01:14', 'Gene Rounds', '1970-01-01 00:00:03', 'Chong Aquino'),
('36533', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '71247', NULL, NULL, '1999-04-18 22:21:17', 'Catherin Craven'),
('38215', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '56763', '1970-01-01 00:00:33', 'Cynthia Abrams', '1996-01-17 22:49:31', 'Cyrus Brunner'),
('38493', '3304dddb-1b72-607f-25c2-579daad24557', '36058', NULL, NULL, '1970-01-01 00:17:23', 'Germaine Brito'),
('42182', '3304dddb-1b72-607f-25c2-579daad24557', '43935', '2008-06-29 20:03:18', 'Valentin Hoff', '2007-10-16 11:48:32', 'Paige Woody'),
('42407', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '41473', '2013-07-12 06:45:52', 'Apolonia Peek', '2019-01-07 16:19:23', 'Ursula Bond'),
('43961', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '73622', '2018-03-13 22:00:25', 'Drew Lyle', '1970-01-01 00:00:07', 'Mervin Carbajal'),
('47416', '3304dddb-1b72-607f-25c2-579daad24557', '31928', '2012-05-09 05:23:04', 'Carletta Blackburn', '1970-02-07 02:19:16', 'Lucas Quezada'),
('49150', '3304dddb-1b72-607f-25c2-579daad24557', '60750', '1977-03-02 09:43:45', 'Aileen Abernathy', '2019-02-04 09:02:50', 'Rivka Marsh'),
('50784', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '07584', '1970-01-01 00:15:36', 'Abdul Newberry', '1970-01-01 00:00:08', 'Arnette Braun'),
('51081', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '98556', '1999-11-12 17:14:19', 'Kasey Acuna', '1996-12-05 18:55:27', 'Cletus Paredes'),
('51388', '3304dddb-1b72-607f-25c2-579daad24557', '73054', NULL, NULL, '2021-08-31 14:04:00', 'Cole May'),
('51459', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '94527', '1970-01-01 00:00:30', 'Mark Reich', '1992-06-02 20:33:25', 'Adalberto Horan'),
('53248', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '16655', '1970-01-01 01:46:09', 'Shantay Devito', '1970-01-01 00:09:30', 'Florencio Teague'),
('55984', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '98556', '1995-04-06 18:25:15', 'Willis Abrams', '2009-10-09 12:16:35', 'Alexander Abraham'),
('61882', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '19552', NULL, NULL, '1973-05-09 01:21:20', 'Antonietta Jean'),
('63514', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '12717', '1975-07-15 14:13:17', 'Tracey Mcmanus', NULL, NULL),
('65923', '3304dddb-1b72-607f-25c2-579daad24557', '47399', '1970-01-01 00:01:21', 'Leroy Burrell', '2005-10-04 14:00:00', 'Adam Mccarthy'),
('68309', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '02410', '2015-08-30 05:47:02', 'Arlen Barth', NULL, NULL),
('69323', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '93951', '2012-04-05 04:17:39', 'Bret Jeffrey', '1970-01-01 00:01:21', 'Jewel Parsons'),
('70528', '3304dddb-1b72-607f-25c2-579daad24557', '04492', '1999-06-22 05:36:21', 'Jody Betts', '1972-05-12 14:20:13', 'Mitch Turpin'),
('79271', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '98577', '1970-01-01 00:00:04', 'Reggie Vaught', '1997-06-16 02:45:35', 'Phillip Gaskins'),
('81655', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '67118', '2000-10-06 02:20:30', 'Benedict Keefer', '1970-01-01 00:10:32', 'Josiah Kern'),
('84937', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '28892', '1999-09-26 21:45:11', 'Jared Abney', '2015-12-17 04:05:48', 'Clayton Newcomb'),
('85992', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '56763', '1989-11-25 00:58:03', 'Allegra Bonner', '1970-01-01 00:01:27', 'Celinda Sullivan'),
('86185', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '11976', '1980-09-18 06:35:39', 'Andrea Pettis', NULL, NULL),
('86263', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '68713', '2018-12-22 11:32:37', 'Carlton Broughton', '1992-02-03 04:19:22', 'Abel Mclaughlin'),
('86292', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '11976', '1982-04-08 14:00:47', 'Clair Driscoll', '2021-08-09 11:10:25', 'Tracey Calvin'),
('87472', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '18523', '2009-08-05 06:45:12', 'Eartha Keck', '1979-07-28 09:42:05', 'Rod Alford'),
('87680', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '61952', '2021-12-08 11:01:49', 'Jamey Bueno', '1970-11-10 01:21:03', 'Zane Shannon'),
('90110', '6c80a684-1cb5-41af-ff34-60b3ebf808a9', '60750', '1976-09-04 10:12:56', 'Ignacio Gentry', '1992-01-07 01:45:01', 'Dionna Kirchner'),
('96067', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '02410', '2008-10-06 01:27:50', 'Caron Irvin', '2005-09-14 14:18:38', 'Bruna Thomason'),
('98217', '57cdf8c4-47e3-5560-7e41-c1ec321fe728', '87185', '1979-04-07 16:31:19', 'Jana Bozeman', '1978-06-08 18:50:34', 'Karie Bouchard'),
('98826', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '94527', '1970-01-01 00:00:04', 'Shellie Adamson', '1970-01-01 00:00:10', 'Tommy Stockton'),
('99900', '506acf1e-5331-67a9-0d77-d9ebc53aac3d', '18523', '1970-01-01 00:55:24', 'Aron Gutierrez', '2012-09-01 09:33:17', 'Jeanie Compton');

-- 
-- Dumping data for table orderdetail
--
INSERT INTO orderdetail VALUES
('1e6b6be5-f63f-11ec-bd60-98e7430c3bdb', '622a3fd4-027f-4a7d-b12f-c9fda53959f6', 'acb0fd37-d405-11ec-bf1a-98e7430c3bdb', '', NULL, 2, 90000, '2022-06-28 00:32:29', NULL, '2022-06-28 00:32:29', NULL, NULL),
('1e6bde7c-f63f-11ec-bd60-98e7430c3bdb', '622a3fd4-027f-4a7d-b12f-c9fda53959f6', '76d21a1a-d407-11ec-bf1a-98e7430c3bdb', '353675f2-73c0-55a3-bc5d-100ccbc59147', NULL, 1, 116310, '2022-06-28 00:32:29', NULL, '2022-06-28 00:32:29', NULL, NULL),
('208844b8-e607-11ec-8e41-98e7430c3bdb', '2f19d1fc-1d2e-4505-8d75-22d18727c5d0', '5663c8cf-d408-11ec-bf1a-98e7430c3bdb', '', NULL, 1, 170000, '2022-06-07 09:11:22', NULL, '2022-06-07 09:11:22', NULL, '{"OrderDetailId":"208844b8-e607-11ec-8e41-98e7430c3bdb","OrderId":"2f19d1fc-1d2e-4505-8d75-22d18727c5d0","FoodDetailId":"5663c8cf-d408-11ec-bf1a-98e7430c3bdb","DiscountId":"null","Quantity":"1","Amount":"170000","CreatedDate":"7/6/2022 9:11:22 AM","CreatedBy":"null","ModifiedDate":"7/6/2022 9:11:22 AM","ModifiedBy":"null","ListTopping":"","FoodName":"Vegge Lover","FoodCode":"FC-004","ImageURL":"https://pathstorage1.blob.core.windows.net/files/17-1.png","UnitPrice":"170000","SizeName":"M","SizeCode":"SC-002","DiscountCode":"null","DiscountStartDate":"null","DiscountEndDate":"null","DiscountAmount":"null","DiscountMaxAmount":"null","FoodDiscountCode":"null","FoodDiscountStartDate":"null","FoodDiscountEndDate":"null","FoodDiscountAmount":"null","FoodDiscountMaxAmount":"null"}'),
('208860c4-e607-11ec-8e41-98e7430c3bdb', '2f19d1fc-1d2e-4505-8d75-22d18727c5d0', '56620dc4-d408-11ec-bf1a-98e7430c3bdb', '65f88212-5922-6619-4ea4-e0d1ddfbcf7c', NULL, 1, 128182, '2022-06-07 09:11:22', NULL, '2022-06-07 09:11:22', NULL, NULL),
('20888103-e607-11ec-8e41-98e7430c3bdb', '2f19d1fc-1d2e-4505-8d75-22d18727c5d0', '5663c8cf-d408-11ec-bf1a-98e7430c3bdb', '353675f2-73c0-55a3-bc5d-100ccbc59147,65f88212-5922-6619-4ea4-e0d1ddfbcf7c', NULL, 1, 186492, '2022-06-07 09:11:22', NULL, '2022-06-07 09:11:22', NULL, NULL),
('2088a1f9-e607-11ec-8e41-98e7430c3bdb', '2f19d1fc-1d2e-4505-8d75-22d18727c5d0', '76d21a1a-d407-11ec-bf1a-98e7430c3bdb', '', NULL, 1, 100000, '2022-06-07 09:11:22', NULL, '2022-06-07 09:11:22', NULL, NULL),
('283eb8ce-e7da-11ec-8e41-98e7430c3bdb', '73446ee2-9877-4fc0-8dfc-75112c3248b3', 'f3c96c9e-d403-11ec-bf1a-98e7430c3bdb', '', NULL, 1, 30000, '2022-06-09 16:54:30', NULL, '2022-06-09 16:54:30', NULL, NULL),
('283eb8ce-e7da-11ec-8e41-98e7430c3bdc', '73446ee2-9877-4fc0-8dfc-75112c3248b2', 'f3c96c9e-d403-11ec-bf1a-98e7430c3bdb', '', NULL, 1, 30000, '2022-06-09 16:54:30', NULL, '2022-06-09 16:54:30', NULL, NULL),
('a7f650ec-f63e-11ec-bd60-98e7430c3bdb', '82c656cd-2689-4420-ac54-5b7e62f7054f', 'acb0ea22-d405-11ec-bf1a-98e7430c3bdb', '', NULL, 1, 35000, '2022-06-28 00:29:10', NULL, '2022-06-28 00:29:10', NULL, NULL),
('a7facb4b-f63e-11ec-bd60-98e7430c3bdb', '82c656cd-2689-4420-ac54-5b7e62f7054f', '76d2490b-d407-11ec-bf1a-98e7430c3bdb', '65f88212-5922-6619-4ea4-e0d1ddfbcf7c', NULL, 2, 278182, '2022-06-28 00:29:10', NULL, '2022-06-28 00:29:10', NULL, NULL);

-- 
-- Dumping data for table `order`
--
INSERT INTO `order` VALUES
('2f19d1fc-1d2e-4505-8d75-22d18727c5d0', 'OC-001', NULL, 584674, '756e18ef-7f9c-33f8-0878-3ccbef6739df', 'Hà Nội', '0915369789', 0, NULL, '2022-06-07 09:11:22', NULL, '2022-06-07 09:11:22', NULL, 0),
('622a3fd4-027f-4a7d-b12f-c9fda53959f6', 'OC-005', NULL, 206310, '756e18ef-7f9c-33f8-0878-3ccbef6739df', '2000 Front Ct, 257 Towers Bldg, Springfield, Illinois, 70064', '(691) 333-7270', 2, NULL, '2022-06-28 00:32:29', NULL, '2022-06-28 00:32:29', NULL, 0),
('73446ee2-9877-4fc0-8dfc-75112c3248b2', 'OC-003', NULL, 30000, '756e18ef-7f9c-33f8-0878-3ccbef6739df', '2000 Front Ct, 257 Towers Bldg, Springfield, Illinois, 70064', '(691) 333-7270', 3, '', '2022-06-23 16:54:30', NULL, '2022-06-23 16:54:30', NULL, 1),
('73446ee2-9877-4fc0-8dfc-75112c3248b3', 'OC-002', NULL, 30000, '756e18ef-7f9c-33f8-0878-3ccbef6739df', '2000 Front Ct, 257 Towers Bldg, Springfield, Illinois, 70064', '(691) 333-7270', 1, 'Do xử lý lâu', '2022-06-09 16:54:30', NULL, '2022-06-09 16:54:30', NULL, 0),
('82c656cd-2689-4420-ac54-5b7e62f7054f', 'OC-004', NULL, 313182, '756e18ef-7f9c-33f8-0878-3ccbef6739df', '2000 Front Ct, 257 Towers Bldg, Springfield, Illinois, 70064', '(691) 333-7270', 5, NULL, '2022-06-28 00:29:10', NULL, '2022-06-28 00:29:10', NULL, 0);

-- 
-- Dumping data for table layoutconfig
--
INSERT INTO layoutconfig VALUES
('1cd168aa-ef83-11ec-946d-98e7430c3bdb', 'DiscountConditionList', '[{"NameColumn":"Mã điều kiện", "DataBind":"DiscountConditionCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Đối tượng", "DataBind":"DiscountConditionFor", "Type":"string", "Width":250, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n\t{"NameColumn":"Tiêu đề", "DataBind":"DiscountConditionName", "Type":"string", "Width":250, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Lý do giảm giá", "DataBind":"DiscountConditionReason", "Type":"string", "Width":250, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Giá trị tối thiểu", "DataBind":"DiscountConditionMin", "Type":"currency", "Width":150, "Title":"", "Position":"end", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Giá trị tối đa", "DataBind":"DiscountConditionMax", "Type":"currency", "Width":150, "Title":"", "Position":"end", "Tooltip":false, "State":true}]'),
('4d76d7f1-cef1-11ec-a67b-98e7430c3bdb', 'OrderList', '[{"NameColumn":"Ngày tạo", "DataBind":"CreatedDate", "Type":"date", "Width":140, "Title":"", "Position":"center", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Mã đơn hàng", "DataBind":"OrderCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Khách hàng", "DataBind":"UserName", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Địa chỉ nhận", "DataBind":"Address", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Số điện thoại", "DataBind":"Phone", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tổng tiền", "DataBind":"TotalAmount", "Type":"currency", "Width":200, "Title":"", "Position":"center", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Trạng thái", "DataBind":"OrderStatusText", "Type":"option", "Width":200, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Lý do hủy", "DataBind":"OrderReason", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":false, "State":true}]'),
('7886267d-d069-11ec-a67b-98e7430c3bdb', 'SliderList', '[{"NameColumn":"Mã Slider", "DataBind":"SliderCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Hình ảnh", "DataBind":"SliderImage", "Type":"image", "Width":140, "Title":"", "Position":"center", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Link", "DataBind":"SliderLink", "Type":"string", "Width":200, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tiêu đề", "DataBind":"SliderTitle", "Type":"string", "Width":200, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tên Slider", "DataBind":"SliderName", "Type":"string", "Width":200, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Nội dung", "DataBind":"SliderContent", "Type":"string", "Width":400, "Title":"", "Position":"left", "Tooltip":false, "State":true}]'),
('8423aa8d-cc57-11ec-a67b-98e7430c3bdb', 'FoodDetailList', '[{"NameColumn":"Kích thước", "DataBind":"SizeId", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true}, {"NameColumn":"Đơn giá", "DataBind":"Amount", "Type":"currency", "Width":300, "Title":"", "Position":"center", "Tooltip":false, "State":true}]'),
('ad814271-d215-11ec-9c67-98e7430c3bdb', 'DiscountList', '[{"NameColumn":"Mã giảm giá", "DataBind":"DiscountCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tiêu đề", "DataBind":"DiscountTitle", "Type":"string", "Width":250, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Giảm giá", "DataBind":"DiscountAmount", "Type":"percent", "Width":150, "Title":"", "Position":"end", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Giảm tối đa", "DataBind":"DiscountMaxAmount", "Type":"currency", "Width":150, "Title":"", "Position":"end", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Ngày bắt đầu", "DataBind":"DiscountStartDate", "Type":"date", "Width":150, "Title":"", "Position":"center", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Ngày kết thúc", "DataBind":"DiscountEndDate", "Type":"date", "Width":150, "Title":"", "Position":"center", "Tooltip":false, "State":true}]'),
('b51f4e11-d00d-11ec-a67b-98e7430c3bdb', 'BlogList', '[{"NameColumn":"Mã bài viết", "DataBind":"BlogCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Hình ảnh", "DataBind":"BlogImage", "Type":"image", "Width":140, "Title":"", "Position":"center", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Chủ đề", "DataBind":"BlogTopic", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Tiêu đề", "DataBind":"BlogTitle", "Type":"string", "Width":200, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Mở đầu", "DataBind":"BlogIntro", "Type":"string", "Width":200, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Nội dung", "DataBind":"BlogContent", "Type":"string", "Width":400, "Title":"", "Position":"left", "Tooltip":true, "State":false},\r\n    {"NameColumn":"Trích dẫn", "DataBind":"BlogQuote", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":false},\r\n    {"NameColumn":"ND nhấn mạnh", "DataBind":"BlogHighlight", "Type":"string", "Width":150, "Title":"Nội dung nhấn mạnh", "Position":"left", "Tooltip":true, "State":false},\r\n    {"NameColumn":"Nội dung khác", "DataBind":"BlogOther", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":false},\r\n    {"NameColumn":"Kết luận", "DataBind":"BlogSummary", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true}]'),
('b9be6401-f7d1-11ec-bd60-98e7430c3bdb', 'AccessLogList', '[{"NameColumn":"Người dùng", "DataBind":"UserAction", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Đối tượng", "DataBind":"Subject", "Type":"string", "Width":250, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n\t{"NameColumn":"Hành động", "DataBind":"Action", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Mô tả", "DataBind":"Description", "Type":"string", "Width":250, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Thời gian", "DataBind":"CreatedDate", "Type":"date", "Width":150, "Title":"", "Position":"center", "Tooltip":false, "State":true}]'),
('cbacd305-c64a-11ec-a67b-98e7430c3bdb', 'CategoryList', '[{"NameColumn":"Mã danh mục", "DataBind":"CategoryCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tên danh mục", "DataBind":"CategoryName", "Type":"string", "Width":180, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Mô tả", "DataBind":"Descriptions", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Hình ảnh", "DataBind":"CategoryImage", "Type":"image", "Width":250, "Title":"", "Position":"center", "Tooltip":false, "State":true}]'),
('ec097a26-cae9-11ec-a67b-98e7430c3bdb', 'FoodList', '[{"NameColumn":"Mã thực phẩm", "DataBind":"FoodCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tên thực phẩm", "DataBind":"FoodName", "Type":"string", "Width":180, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Mô tả", "DataBind":"Descriptions", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Giới thiệu", "DataBind":"Title", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Hình ảnh", "DataBind":"ImageURL", "Type":"image", "Width":250, "Title":"", "Position":"center", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tác giả", "DataBind":"FullName", "Type":"string", "Width":180, "Title":"", "Position":"left", "Tooltip":false, "State":false}]'),
('f2ed210a-d132-11ec-a67b-98e7430c3bdb', 'FaqList', '[{"NameColumn":"Mã câu hỏi", "DataBind":"FaqCode", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Tiêu đề", "DataBind":"FaqName", "Type":"string", "Width":140, "Title":"", "Position":"left", "Tooltip":false, "State":true},\r\n    {"NameColumn":"Nội dung câu hỏi", "DataBind":"FaqQuestion", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true},\r\n    {"NameColumn":"Trả lời", "DataBind":"FaqAnswer", "Type":"string", "Width":300, "Title":"", "Position":"left", "Tooltip":true, "State":true}]');

-- 
-- Dumping data for table favorite
--
-- Table fast_food_management.favorite does not contain any data (it is empty)

-- 
-- Dumping data for table faq
--
INSERT INTO faq VALUES
('1d924db9-12ea-7c5f-966e-03fef0add176', 'Demers2021', 'FAC-001', 'Ab asperiores delectus. Vel voluptatem natus? Ut unde eius. Perferendis.', 'Earum expedita quis natus magni aperiam, maiores quod sit omnis. Enim dignissimos quia eos laborum aliquam saepe ipsa dicta nemo; ut accusantium dolore a qui est error et magni perspiciatis. Deserunt et iste velit minima aut dolores ducimus dicta nihil. Voluptas pariatur eos dignissimos non ut velit ut non quia. Sit illum sed debitis consequatur, ut neque saepe tempora tempore. Consequuntur ratione libero sed nostrum commodi cupiditate quis dolorem voluptas. Aliquid eligendi hic dicta itaque eligendi possimus error eum consectetur! Quaerat sit iste quis iusto doloribus molestiae velit dolorem quis.', 1, '2022-04-11 00:01:31', NULL, '2022-05-11 22:59:57', NULL),
('1f25bd2a-d147-11ec-9c67-98e7430c3bdb', 'Vấn đề an toàn thực phẩm', 'FAC-008', 'Nguồn gốc nguyên liệu của thực phẩm của quán bắt nguồn từ đâu?', 'Tất cả nguyên liệu chế biến được lấy từ trang trại thiên nhiên, đã được kiểm chứng an toàn thực phẩm.', 1, '2022-05-11 23:26:33', NULL, '2022-05-11 23:26:45', NULL),
('373c4bda-7436-26ca-43ac-28d3b409e320', 'Abreu188', 'FAC-007', 'Doloremque ut dicta; illum sint enim; iste molestiae voluptatum; aut et.\r\n', 'Illo aut, sed neque sapiente et aut saepe ad recusandae. Impedit qui, exercitationem omnis obcaecati unde perspiciatis aut nobis aut...', 7, '2022-04-11 00:03:17', NULL, '2022-05-11 22:59:18', NULL),
('3ae3784c-2d94-77b4-2a61-aa21d0714907', 'Jerry1985', 'FAC-004', 'Incidunt voluptas sed. Aut perspiciatis sequi.\r\nEt dolor quisquam. Perferendis!', 'Quibusdam doloremque corrupti sint voluptas, ut rem eius sit repellat. Unde cumque velit, incidunt ut quisquam ut incidunt non unde. Et ex eum aspernatur consequatur, repellendus debitis assumenda iste aspernatur. Adipisci et, est aut consequatur qui voluptates rerum sint dicta! Voluptas eum, aut quia rerum repellat alias accusamus consequatur aspernatur. Beatae aperiam est neque error quisquam dolor aut ipsam tempora!', 4, '2022-04-11 00:00:06', NULL, '2022-05-11 22:58:45', NULL),
('62d5265a-5d7b-2bca-223a-e116be82f154', 'Bacon2019', 'FAC-006', 'Laudantium enim sint autem.', 'Cupiditate totam rerum qui eaque aut ab eum recusandae aliquid. Velit ullam praesentium nulla odio quibusdam consequuntur quod, qui impedit. Illum commodi dolore quis rem neque quae, a voluptatem voluptas? Eius molestiae eos accusamus sunt voluptas voluptatem nobis similique sunt! Est maiores esse ratione voluptatem amet unde qui ut fugit. Asperiores voluptas repellendus cum natus dolorum ipsum quaerat et quae.', 6, '2022-04-16 12:01:42', NULL, '2022-05-11 22:59:06', NULL),
('64112187-6592-24f7-afb9-81afd5456b90', 'Joel528', 'FAC-002', 'Dolores dicta nulla sint sit et.', 'Iste mollitia beatae placeat atque ex accusantium consectetur iste enim. Quis praesentium temporibus sit voluptate est earum officiis illum sit. Aliquam veniam reiciendis tempore et, qui perspiciatis dolor saepe ex! Iusto dolores laborum, consequatur a soluta corporis nesciunt natus quia. Qui reiciendis nihil dolore officia iste velit voluptatem impedit ut! Tempore voluptas non, facere nisi enim aliquid porro quibusdam numquam. Sit porro temporibus, perspiciatis magni nulla et nihil officiis magni. Quae est totam est reprehenderit aut iste necessitatibus odio quia.', 2, '2022-04-11 00:01:49', NULL, '2022-05-11 22:58:21', NULL),
('73b54309-388b-5f8d-dbbc-80eebd861ac2', 'Emmons311', 'FAC-005', 'Ut magni molestias; ea voluptatem illo. Sunt consequatur reiciendis. Unde amet.', 'Voluptatem sint rem aut modi at omnis a officiis unde. Quo aspernatur eaque, sed possimus nam est sed suscipit doloribus. Labore ut sint quis dolorum aut ex laudantium dolor unde? Quia voluptate delectus non et eaque est dolorem numquam doloremque! Qui aut corporis, sunt ipsum quia autem optio qui est? Necessitatibus ullam quam mollitia dolorem sapiente enim iste accusantium ut.', 5, '2022-04-13 20:24:44', NULL, '2022-05-11 22:58:55', NULL),
('78b170f7-d147-11ec-9c67-98e7430c3bdb', 'Chất lượng thức ăn', 'FAC-009', 'Chất lượng thức ăn của quán thế nào', 'Tất cả nguyên liệu chế biến được lấy từ trang trại thiên nhiên, đã được kiểm chứng an toàn thực phẩm.', 1, '2022-05-11 23:29:03', NULL, '2022-05-11 23:29:03', NULL),
('7d0cb27f-5134-5a7a-3ecd-da15c50e55e9', 'Keven1954', 'FAC-003', 'Aut ratione ut. Eligendi beatae perspiciatis! Aut quas at. Accusamus quod.', 'Molestias rerum, atque nobis deserunt sed assumenda recusandae nesciunt voluptatum. Aspernatur voluptate corporis aliquam rem architecto perspiciatis sed tempora ab. Error rem atque eos sed culpa quia dolor asperiores dolores. Fuga in voluptas dolorem ullam, unde non deleniti et illum. Ea voluptatibus quibusdam alias eum, consequatur magni dolore quaerat quas. Quo nulla ut repellendus unde odio quis illum ea temporibus. Voluptatem doloremque sit dolorem maxime voluptatem nemo dolore perspiciatis assumenda!', 3, '2022-04-15 05:04:25', NULL, '2022-05-11 22:59:48', NULL);

-- 
-- Dumping data for table discountcondition
--
INSERT INTO discountcondition VALUES
('273e2a28-f16a-11ec-bd60-98e7430c3bdb', 'DCC-002', 100000, 150000, 'Giảm giá cho đơn hàng trên 100k', 'Đơn hàng', '2022-06-21 20:57:56', NULL, '2022-06-21 21:14:31', NULL, 'Ưu đãi cho đơn hàng tối thiểu 100k '),
('2c9f2dc1-f166-11ec-bd60-98e7430c3bdb', 'DCC-001', 0, 0, 'Giảm giá cho khách hàng mới', 'Người dùng', '2022-06-21 20:29:27', NULL, '2022-06-21 20:39:00', NULL, 'Ưu đãi dành cho khách hàng mới');

-- 
-- Dumping data for table contact
--
-- Table fast_food_management.contact does not contain any data (it is empty)

-- 
-- Dumping data for table comment
--
INSERT INTO comment VALUES
('869e64c2-f49f-11ec-bd60-98e7430c3bdb', NULL, NULL, 'Giá cả hợp lý', NULL, 4, '2022-06-25 22:57:33', NULL, '2022-06-25 22:57:33', NULL, '73446ee2-9877-4fc0-8dfc-75112c3248b2', 'FC-001', 'phamduyen');

-- 
-- Dumping data for table cartdetail
--
INSERT INTO cartdetail VALUES
('a6ed7f8c-f6b2-11ec-bd60-98e7430c3bdb', 'phamduyen', '76d21a1a-d407-11ec-bf1a-98e7430c3bdb', 1, '353675f2-73c0-55a3-bc5d-100ccbc59147,65f88212-5922-6619-4ea4-e0d1ddfbcf7c');

-- 
-- Dumping data for table blog
--
INSERT INTO blog VALUES
('148ed882-32b8-218e-9c20-39c2f00615e8', 'BC-010', NULL, '10 Reasons To Do A Digital Detox Challenge', 'Excepturi perferendis veritatis.', 'Accusantium perspiciatis maxime. Voluptatem explicabo est. Consequatur assumenda expedita. Quis iure iste. Quas et quidem. Cumque perspiciatis ullam? Omnis aspernatur quidem. Aliquam vero.\r\n', 'Sed eum maxime non tempora velit qui sunt iusto non. Rerum non consequuntur, sit qui recusandae iure possimus quod consequatur. Natus aut non qui fugit similique illo et eligendi nam! Blanditiis repellendus, et voluptatem aut eaque magni mollitia nihil porro. Laudantium quis reprehenderit ex, minus cupiditate velit molestiae illo ipsam. Doloremque ut qui numquam qui quo doloremque excepturi inventore nulla! Quas eos eaque fugit aut consectetur et id praesentium quisquam. Libero dolorem qui non ex quaerat enim natus pariatur quia. Omnis quo modi nemo at dolor omnis vitae error eos...\r\nAdipisci autem sapiente consequuntur sint commodi numquam necessitatibus nam error. Mollitia sed qui fugit, nisi similique sint delectus perferendis eaque.\r\nRepudiandae et perspiciatis dolorem id minima odit molestiae omnis deleniti. Magnam voluptatem culpa sit, exercitationem vitae beatae recusandae veniam nostrum? Quisquam voluptatem quia aut repudiandae eligendi dolores nulla beatae molestiae! Sapiente sit officia asperiores aut, ab aliquam id quod repellat. Dolorem voluptates quia odit iste eos sit nam dolor hic? Aspernatur adipisci exercitationem veritatis enim id dicta dolorum porro est! Asperiores ad, in consequatur totam omnis ut nam magnam modi.', 'Quos quo rerum asperiores necessitatibus ut quas quaerat iste vero.', 'Nihil qui sint vel nam quo aut aliquam repellat voluptate. Aspernatur doloribus libero quia et dicta quia laboriosam ipsa vero! Quis recusandae doloremque qui atque velit dolor aliquam autem magni; delectus minima vel et maiores ut maiores saepe in aut. Quia voluptas quis laudantium dolore amet quia qui illo sequi; corrupti vel in omnis, nemo porro molestiae enim facilis non. Ipsum quis est cupiditate tempora omnis cum et ab dolor? Veniam velit adipisci, laboriosam inventore eligendi in sint error dolores.\r\nEligendi at magni quam laborum est et consequuntur sit natus. Veritatis iste exercitationem, esse neque officia tempore architecto sed id. Optio a sit distinctio error dolores consequatur hic quasi rerum. Aliquam sed velit, perspiciatis voluptatem iste dolore ea soluta quisquam. Et est ut quo nihil consectetur iste et corrupti numquam! Vel inventore nam sed possimus deserunt quod ut aliquam molestias? Omnis maxime iste incidunt enim, cumque quos sit possimus vitae! Omnis accusamus voluptatum exercitationem sunt error nobis quia nam quia. Nobis numquam ut et ut dolor perspiciatis illum qui excepturi.', 'Et obcaecati molestias ut, non impedit ut iste modi necessitatibus.', 'Nesciunt libero vel. Dolorum quia dolor ad voluptatem nulla error.\r\nVoluptatum ut voluptatem et voluptatem at. Omnis reiciendis nihil aliquam tempore non a? Natus et iste sunt temporibus sed iste aut!', '2022-04-12 01:44:00', NULL, '2022-04-14 15:08:47', NULL),
('15d0d796-1465-4665-fc83-196123975cb2', 'BC-006', 'https://pathstorage1.blob.core.windows.net/files/blog-3.jpg', 'Traditional Soft Pretzels with Sweet Beer Cheese', 'Labore ratione et.', 'Sed iste sed.\r\nVoluptatem qui molestiae. Quis eos voluptates; et eos soluta. Excepturi asperiores qui! Ad dicta itaque. Delectus recusandae perspiciatis. Architecto doloremque consequatur. Sed facilis.', 'Tenetur id impedit consectetur tempora aperiam ut ad quisquam fugit. Id sit ullam reprehenderit est sit ut aut eos in? Commodi facilis beatae itaque voluptates sed voluptates, unde ut rerum. Earum nulla ullam ratione omnis ut molestias harum est animi. Omnis recusandae fugiat voluptatem quisquam omnis reprehenderit aut natus quia! In dolor cumque praesentium mollitia non, natus doloremque consequatur ratione? Sit quia minus, optio accusantium odit nam asperiores ea aut. Corrupti modi minus, sit suscipit eaque libero aut perferendis ullam!\r\nLibero qui similique enim quisquam animi molestiae qui enim doloremque.', 'Veniam odit voluptas illum, blanditiis ut voluptatem placeat minima eaque. Nam a, nesciunt laboriosam obcaecati inventore numquam omnis autem atque? Enim reprehenderit ipsa perspiciatis eos veritatis.', 'Iste optio ut aperiam sit sed autem natus praesentium aut. Error nobis in obcaecati, aut ut ea dicta ut eos. Perspiciatis autem tempore nemo unde rem ut quis tempora velit. Rem unde neque dignissimos quo sed aliquid non corrupti iste; vel sit voluptatem quas omnis ipsum quod perspiciatis praesentium consectetur.\r\nQuidem recusandae tempore et dolor fugit id illo deleniti animi.', 'Sed enim ex. Ratione tempora sequi adipisci ea pariatur ea assumenda quam! Quae voluptatum deserunt quaerat consequatur saepe minus voluptas iste quasi. Illum laboriosam ut nesciunt neque provident unde!', 'Eius itaque possimus quia necessitatibus et sint qui consectetur. Qui omnis velit enim. Odio eligendi fugit sunt obcaecati dolor consequatur? Voluptates cum repellendus! Quis porro doloremque. Qui ut.\r\n', '2022-04-15 08:05:29', NULL, '2022-05-10 20:21:00', NULL),
('1b691e79-236d-5b5a-9d20-39c2f00615e8', 'BC-002', NULL, 'My Favorite Easy Black Pizza Toast Recipe', 'Aliquid aliquam vero reprehenderit.', 'Quasi fuga quasi. Suscipit odit est! Minima praesentium sit? Sed iste nostrum.\r\nVelit tenetur assumenda. Adipisci provident architecto. Cupiditate et ducimus! Commodi omnis sunt. Id dolores et!', 'Harum quia sint quisquam voluptatem ut dolorum repudiandae optio rerum. Nemo quis nostrum deserunt maiores iste magnam error dolorum qui. Dolores error ea id quae et debitis reprehenderit dolores ea. Unde harum id et obcaecati quo omnis error sed officiis. Molestiae non expedita incidunt officia, qui deserunt soluta maxime voluptas. Dolorem quae enim odit, nostrum cum natus vel illo sit.\r\nLaudantium rem debitis modi perspiciatis voluptas porro voluptatibus nesciunt natus. Modi qui dicta, tempora consequuntur vel fugit consequatur voluptas consequatur. Delectus repellendus, vitae id est eos sit nobis nemo sed. Rem doloremque aliquam et ea dolor minus incidunt eum dolorem. Officiis et iste, et deserunt nihil corrupti laborum amet in. Voluptas aut, incidunt itaque impedit repellat et enim suscipit cupiditate.\r\nDolores et magnam voluptatem harum tempora iste maiores et unde. Repellat ea enim, omnis totam ut deleniti nisi et aspernatur.', 'Voluptas assumenda nam. Non molestiae laboriosam. Eos aliquid voluptatem. Perspiciatis est perspiciatis; mollitia ut aliquam. Iure libero delectus. Asperiores laboriosam voluptatibus.\r\nEx accusantium.', 'Qui nam rerum quisquam voluptatem voluptas officiis molestiae sit autem. Dignissimos illo voluptates qui perferendis voluptas, vero veritatis quam est? Porro rerum, magnam consequatur aliquid tempora corrupti ex quaerat deleniti; facilis omnis quos earum sit eum dolore error optio quibusdam. Omnis et, sit repellendus hic cupiditate autem quia et error. Quo consectetur voluptatem aperiam, expedita dolore magnam vel fuga expedita! Dolorem minima unde doloremque quia eos reprehenderit eaque molestiae expedita.\r\nQui quo placeat et iusto accusamus, unde et est fuga. Possimus delectus et tempora voluptatem, quae adipisci amet officia doloribus! Quae eos iste molestias aliquam vel natus et iste ut. Animi placeat eum sit in, error voluptas eos quia sit. Et sed, repellendus sequi incidunt omnis nesciunt nostrum id vero! Ut voluptate ut nam perspiciatis dolorem aperiam quibusdam doloribus quia...', NULL, NULL, '2022-04-15 08:46:26', NULL, '2022-04-19 10:42:56', NULL),
('25c6c36e-1668-7d10-6e09-bf1378b8dc91', 'BC-003', 'https://pathstorage1.blob.core.windows.net/files/blog-7.jpg', '10 Reasons To Do A Digital Detox Challenge', 'Corrupti voluptatem explicabo est et.', 'Earum quo nam. Reprehenderit et explicabo. Est qui dicta; quia dolore qui. Natus in non! Error corporis quis. Cupiditate expedita qui! Ratione et aut. Eum odit omnis.\r\n', 'At dolore molestiae molestias ex veritatis quos dolor temporibus enim. Explicabo qui voluptatum eaque ipsa natus voluptatem aut amet libero. Qui maxime aliquam et rerum repudiandae quae ut et labore. Magni similique sint ducimus quam est voluptas in, ut eligendi. Aperiam architecto mollitia in perspiciatis suscipit ut qui consequuntur quibusdam. Similique impedit, et iste sint sit distinctio consequatur reprehenderit eos. Nulla consequatur at porro ratione recusandae placeat tenetur ut doloribus.\r\nDolorem minima ipsam, omnis ipsum architecto hic nam non rem. Quia totam, voluptates temporibus rerum sequi natus dolorum voluptatem quibusdam.', 'Harum ut molestiae. Voluptates officiis nihil. Aut voluptas aut; quas tempora eius. Sed aut ut; voluptatem aut eos. Officiis dolorem vel. Recusandae numquam et. Ipsum error tempora. Libero quod.\r\n', 'Illum modi voluptatem ut, natus possimus ea laudantium reiciendis eum. Obcaecati sed similique, incidunt eveniet soluta qui asperiores ut dignissimos. Obcaecati aperiam molestias distinctio, nemo et vel sit nobis qui. Odit praesentium iste assumenda quasi mollitia ratione, qui amet qui. Magni distinctio ea facere atque id perferendis error est qui. Blanditiis ea, impedit voluptatem deleniti et debitis quia perferendis sit. Culpa sunt mollitia aperiam a voluptatem, ut doloribus beatae laborum; ut eum quia deleniti est, nihil voluptatum qui molestiae eaque.\r\nAut inventore magnam, perferendis voluptates ea est et voluptas nihil. Eum est repellat qui pariatur sed corporis fugit error sit. Id at voluptatum cumque sint sed et repudiandae id sapiente. Ut adipisci aut odit consequuntur reiciendis sit ipsa voluptates adipisci! Consequatur fuga qui ut error ratione quia aperiam iste nostrum...\r\nQuas rerum perspiciatis, dolorum voluptatibus unde corporis quia soluta itaque. Temporibus laboriosam voluptatibus repellat exercitationem quis ducimus sit itaque beatae. In mollitia quam omnis, inventore rerum aut aliquam molestias ipsum. Voluptatem nobis dolore commodi quos est sit blanditiis sit officia; natus odit fuga ullam aliquam consequatur voluptas deserunt exercitationem sit. Perspiciatis labore, tempore quos fuga aut pariatur assumenda sit sint. Magni qui et ut voluptatem iste quidem quo ab et. Molestiae deleniti illo accusantium adipisci consequatur porro suscipit ut magni.', 'Omnis aspernatur hic asperiores ratione. Voluptatem ipsam atque quia. Dignissimos vel qui exercitationem minima, sit omnis nisi ipsam ut. Aliquid tenetur accusamus? Officiis hic vitae. Architecto ut.', 'Rerum recusandae corporis error. Mollitia tenetur expedita natus! Dolor voluptate quia rerum eligendi alias quas. Magnam rerum qui magni perspiciatis perferendis unde qui; unde et non qui nobis itaque.', '2022-04-14 04:00:46', NULL, '2022-05-19 16:36:38', NULL),
('354f1b13-17bf-1b52-87d5-ba100c6f7bce', 'BC-008', NULL, '6 Ingredient Vegan Cinnamon Rolls', 'Perspiciatis ullam quia expedita.', 'Non nihil pariatur. Eos natus fugiat. Nisi unde laborum. Cumque aliquid sint. Magnam cumque beatae! Laudantium beatae ut; non voluptatem aliquid. Dolor quae at.\r\nOmnis ducimus voluptate.\r\n', 'Nobis eum odio minus illum consequuntur porro ad et magni. Consequatur omnis ut dolorem nisi ab repudiandae dolorem alias molestiae. Voluptates qui, corporis culpa iste maxime aut vel error dolorem! Vitae dolor perspiciatis sint et ut nemo maiores soluta omnis. Ab expedita error et explicabo ut eum veritatis, eligendi repellat. Voluptatem quibusdam, perferendis sit possimus qui enim repudiandae dolore laborum! Et quo architecto sit non ut eum ab assumenda enim; eum inventore distinctio vel sed quisquam cum, sapiente sit non; praesentium corporis unde vel magni minima qui rerum quia est.\r\nAut aliquam nostrum dolores voluptas, unde voluptates illum unde perspiciatis. Dolore laudantium eaque rerum quod quam dolores quis minus inventore! Vel dolor ipsa vel tenetur quaerat consequatur autem qui consectetur. Eos ut eum qui quae, rerum fugit officia facilis illo.\r\nAtque facilis nemo voluptates iste repellat minima sit et unde. Repellendus porro labore quo cupiditate quibusdam qui et eum quis! Autem velit aspernatur et quo excepturi ipsum quaerat sit repudiandae. Sint vitae quae quaerat omnis adipisci modi laboriosam ducimus repellat! Ut iste cum eos, at inventore voluptas excepturi ut nisi? Inventore ipsum sed autem est id est unde ab tenetur.', 'Repudiandae nesciunt doloremque maxime modi. Pariatur qui ut earum dignissimos ratione!\r\nNon architecto id ea similique ut adipisci hic explicabo. Impedit ullam alias autem veniam ut laboriosam? Iste.', 'Quisquam commodi vitae adipisci deserunt est animi velit est explicabo. Explicabo inventore molestiae velit minus odit, architecto itaque dolor error. Eius atque nihil odit natus distinctio aperiam consequatur voluptatem ipsa. Voluptatum id, sint eos vitae aut iste architecto enim nihil! Natus eum inventore culpa dolore error, voluptas vero laborum sequi. Ab ut nesciunt, atque natus repellendus omnis molestiae ut natus! In ratione sint illo tempore nisi ab, adipisci sed dolor. Eius minus impedit est et porro at excepturi, officiis ut.\r\nMaiores dolores consectetur numquam perspiciatis voluptatem eaque modi ullam repellat; voluptas animi impedit numquam fugit ut dolor itaque iure sit.\r\nQuo voluptatem tempore aut et nobis veritatis, aspernatur quia perspiciatis. Sunt placeat, nihil quisquam et quo porro numquam laboriosam non. Quia consequatur ut, deleniti id accusamus et consequuntur qui iure! Magni minima ea ipsa tempore nulla quae consequatur quam incidunt. Autem saepe qui, placeat perspiciatis magni exercitationem sint enim sit! Enim non ullam neque ipsa est, et veniam ad earum. Quis natus pariatur quia dicta natus alias qui voluptas autem. Perferendis recusandae iure reprehenderit ea magni reprehenderit provident expedita at...', 'At dolorum explicabo consequatur ipsa cupiditate sit dolor. Et beatae unde sequi odit! Accusantium similique eum et ullam quis suscipit ut. Necessitatibus est ipsa nam. Aut aperiam ut non quia minima.', 'Provident laborum ut laboriosam quasi voluptatem molestias natus iste ut. Voluptatem explicabo ducimus modi saepe rem nihil sed distinctio placeat!', '2022-04-13 02:27:04', NULL, '2022-04-12 00:01:08', NULL),
('36104b10-705b-57a8-83c0-08fd2f807219', 'BC-001', NULL, 'The Ultimate Hangover Burger: Egg in a Hole Burger Grilled Cheese', 'Accusamus sit error ab sapiente.', 'Tempora facilis veniam sit error ipsa suscipit molestiae. Et ipsum velit! Dignissimos harum sint...\r\nEst sunt error. Unde voluptates omnis; omnis sed quia. Ipsa rerum sed. Deserunt qui sit.', 'Qui laudantium beatae et aliquid totam unde sequi asperiores qui; ipsum laboriosam, ut excepturi cum voluptatum ad ea iste hic. Unde consequuntur sit quia nostrum rem aspernatur qui quas laborum. Consectetur facilis et ab quidem et nostrum amet laboriosam quibusdam; ut corporis necessitatibus eum id non est ut commodi similique. Rerum voluptatem et animi error ut blanditiis velit harum voluptatem! Voluptas possimus atque error commodi labore ab qui ut quo. Ut eveniet natus quam inventore voluptatem voluptas commodi quos facilis. Vitae fuga, veritatis facere omnis commodi et repellat non iste.\r\nImpedit porro nostrum enim sit ducimus temporibus sed, omnis maiores; eos dolor libero eos necessitatibus sed natus consequatur qui natus. Architecto quia suscipit esse et error nisi aliquid omnis minima; neque aspernatur esse deleniti odit id nemo maiores illo aperiam.', 'Atque perspiciatis dicta sit. Earum pariatur enim voluptate sunt. Sunt totam error! Molestiae perspiciatis et quia autem quisquam consectetur consequatur error corporis. Doloremque rerum corrupti...', 'Qui maiores soluta harum pariatur est quia perspiciatis quia rem. Sed sapiente, accusantium impedit voluptatem suscipit dolorem voluptatem ut nisi? Culpa sed, qui est ducimus odit quibusdam eius autem sit! Nisi tempora autem earum minus voluptatem et quia eaque enim. Nihil ipsum debitis qui commodi impedit eos dicta unde dolores!\r\nUt quis sunt cupiditate ipsa, omnis voluptatem ut velit error. Unde nostrum voluptatem rem doloribus odit doloremque quo nemo voluptatem. Alias quibusdam quae commodi omnis aut ea similique doloremque voluptas; rerum dolores doloribus nisi reiciendis voluptate consequuntur, velit tempora voluptas. Quasi placeat, quam totam aut veritatis sed dolore molestias enim. Laboriosam doloremque minima ad voluptatibus voluptatem accusamus neque explicabo recusandae. Ea et amet ut aspernatur, qui et doloremque dolore ut. Tempora quia fuga et eum et velit fugiat accusamus quibusdam.\r\nSimilique recusandae voluptatibus dignissimos vero, vitae quas non ea aliquid. Sed iusto veniam, omnis dolorem at voluptas voluptatem hic ex. Ut ducimus aut explicabo fugiat ut ducimus quibusdam cum sed? Sint id officia fuga exercitationem corporis accusantium consequatur minus iste. Accusantium repellendus neque doloribus quo in neque corporis, ad est. Adipisci odit necessitatibus velit, possimus quia provident blanditiis ab eum. Labore ut cupiditate laborum officiis enim debitis ex distinctio voluptatum! Incidunt corporis et voluptatem et eaque labore, itaque obcaecati quaerat.', 'Nulla excepturi qui voluptatem et sit; unde eaque vel non nostrum tenetur dicta et est. Minima earum error! Laboriosam unde voluptatem? Deleniti sed sit. Eligendi at est. Et perferendis dolor? Neque et.', 'Non praesentium sed qui rerum. Vel praesentium eum quisquam asperiores sit consequatur; quas explicabo velit voluptatem rerum aliquid obcaecati ut sequi quia. Commodi libero veritatis cum. Quis?\r\n', '2022-04-12 08:45:45', NULL, '2022-04-16 11:02:39', NULL),
('3700cc49-55b5-69ea-4929-a2925c0f334d', 'BC-007', 'https://pathstorage1.blob.core.windows.net/files/blog-3.jpg', 'Traditional Soft Pretzels with Sweet Beer Cheese', 'Dolorum eaque commodi id sed quas et.', 'Et sit ex; omnis doloremque odio. Animi voluptatem nihil? Placeat qui hic! Dolorem officia nihil. Sit aut aliquid. Eius voluptatem fugiat. Vel ducimus eos. Provident beatae dolor.\r\n', 'At odit vel voluptate veniam vero sunt consequatur doloribus quia. Quos dignissimos et exercitationem repudiandae nihil in ut inventore nam.\r\nQuia nihil rerum voluptatem porro nobis et consequatur cupiditate ab. Perspiciatis ex, culpa enim temporibus unde exercitationem laudantium dicta libero. Hic doloremque culpa et quidem et facere illo error quia! Voluptatibus tenetur, doloremque quo ex quo adipisci voluptatem fuga provident. Et magni recusandae commodi quia vel obcaecati rerum omnis impedit. Labore fuga, eos ut reprehenderit eum sequi ut porro molestiae. Ut quis harum consectetur reprehenderit libero alias autem fugit nemo. Nulla architecto minus animi consectetur ipsum sit obcaecati dolores eum. Earum rem et minima, quia natus voluptatem nisi eveniet adipisci. Et voluptatum est omnis est rerum pariatur possimus incidunt consequuntur.\r\nHarum eum a error nesciunt accusantium eos ullam beatae aspernatur. Molestias sapiente libero dolorem animi ab porro omnis aliquam aut; quasi aut rerum nisi corrupti sed, error incidunt omnis perspiciatis; ut laboriosam perspiciatis eveniet quis doloremque dolorem velit vel aliquid; et neque non neque ut sapiente explicabo consequatur voluptas cum.', 'Sed nemo iusto molestias architecto mollitia possimus iste ex eos. Pariatur voluptas perspiciatis natus soluta aspernatur ut in sed asperiores. Ut iste rerum praesentium enim sunt fugiat totam expedita...', 'Rerum enim libero ut qui ducimus nostrum aliquam consequatur odio. Ex sit harum eos doloribus aperiam aut non sit alias; velit ratione quia culpa quia alias eligendi vel magnam maiores...\r\nOdio et autem consequuntur animi sapiente voluptas eligendi iste amet.\r\nExplicabo voluptatum modi magnam illo autem error perspiciatis animi hic...', 'Unde officiis nisi obcaecati placeat laborum sed saepe ut. Sit enim voluptatum vero pariatur voluptas optio eos autem ut! Et odit sunt. Explicabo fugit et! Voluptatem vel ut. Sunt earum quas. Error.', 'Est sapiente ipsam doloremque natus ex laudantium vero molestiae dolorem. Unde qui, ut maxime nobis omnis nobis delectus culpa nemo!\r\nEaque vel laudantium et iste iure. Error est sunt non aut magnam.', '2022-04-12 09:05:59', NULL, '2022-05-10 20:20:29', NULL),
('37dd9bb0-4c53-4134-31de-23e177779933', 'BC-004', NULL, '6 Ingredient Vegan Cinnamon Rolls', 'Facilis dolor cum debitis.', 'Eligendi repudiandae vitae. Sint possimus aut. Non et voluptatem. Consequuntur numquam iste. Vero distinctio voluptates. Enim repellat aut.\r\nDignissimos molestiae sit. Et asperiores natus? Numquam.\r\n', 'Quo accusamus ut unde ut explicabo, perspiciatis natus quibusdam quos. Quia est veritatis magnam recusandae maiores a voluptatem sit distinctio. Saepe voluptas consequatur, sapiente expedita et laudantium sint nesciunt ad. Eligendi voluptatem ipsa neque eum sit qui debitis iste ullam. Dolorum ut iusto nemo aut sunt est qui vitae ipsa! Commodi ducimus quasi, vero sit sed doloribus quasi deserunt et. Sed consectetur nihil unde ad nemo deleniti voluptatibus est officiis.\r\nNostrum at et aperiam nemo ullam ad et voluptatem consequuntur. Quae et ut cum magnam tempore beatae voluptatem fuga sed. Saepe nisi tenetur consequatur sequi enim asperiores illo iste architecto; blanditiis facilis consectetur molestias totam commodi vero unde incidunt repudiandae. Omnis tempora voluptatem magni eveniet aut, debitis et omnis nemo. Dignissimos sint asperiores eos quia enim quo, nesciunt deserunt reprehenderit!\r\nUt ad rerum error asperiores nulla voluptatibus consequatur quo eos. Ab qui voluptas sequi quae quo eum omnis dolorum qui. Impedit dolores porro voluptatem eum ipsum perspiciatis minus iure et. Natus fugiat omnis voluptatem tenetur officia deserunt omnis enim quos; recusandae consequatur quis rerum laudantium ratione in ducimus dolore obcaecati. Corrupti consequatur et fugit omnis suscipit explicabo dolores beatae doloribus. Ut exercitationem, numquam voluptatem doloremque qui sed recusandae nostrum voluptatem. Et adipisci ut et iure velit ea quibusdam dolor temporibus.', 'Ea quaerat distinctio quis quia fuga; dolorem sit officia. Illo expedita amet! Velit voluptatem deleniti. Dolores error nobis. Excepturi ipsum natus. Quam est quae. Expedita veritatis nostrum. Est.\r\n', 'Accusantium voluptatem vel ut eius voluptatem est suscipit nostrum suscipit. Necessitatibus accusantium temporibus ut obcaecati modi sequi, possimus voluptate sit. Obcaecati dolor ut voluptatem, optio nemo aut et minima quam! Autem est aliquam quia impedit omnis earum voluptas, quia aut. Rem voluptatum unde error omnis sed sint, porro amet similique.\r\nUnde atque in amet et eum sit atque ut voluptas.', 'Ipsum vel minima eligendi magnam consequatur qui molestiae dolorem eligendi; provident asperiores, doloribus sed perspiciatis voluptates in debitis dicta odit. Explicabo quibusdam provident natus velit.', 'Iste aut consequatur quidem aut dolorem impedit quo maxime iste. Voluptatem aut et molestiae dolores quo voluptatum! Est rerum nihil ut, perspiciatis voluptatibus numquam vel molestiae natus. Quia qui.', '2022-04-12 00:15:15', NULL, '2022-04-13 18:31:37', NULL),
('3b86d2ed-446c-5fce-56be-406293204378', 'BC-009', 'https://pathstorage1.blob.core.windows.net/files/blog-1.jpg', '10 Reasons To Do A Digital Detox Challenge', 'Voluptatem pariatur commodi ipsum.', 'Dolores amet incidunt corrupti commodi ut. Dolor ea est aperiam ut ullam et sit enim.\r\nEst natus dolor; molestiae qui numquam. Nemo ab adipisci! Impedit error quod.', 'Dolore dolorem tempore, voluptas omnis molestiae error aut ipsa explicabo. Quasi ea nisi qui minima ducimus aut nesciunt aspernatur aliquam. Tempore placeat voluptas omnis iste, natus debitis animi quibusdam corporis. Voluptatibus dolores et eaque expedita harum quia ipsum quaerat impedit. Magni voluptas exercitationem, labore atque vitae sunt quasi sint ut! Quia iste sit molestiae earum beatae nulla voluptatem nam deleniti. Ut libero consequatur repellat corrupti nam sunt autem corrupti nesciunt! Rerum voluptatem id hic nulla reiciendis non et impedit voluptas.\r\nSint iste nisi voluptatum libero architecto qui, placeat sunt eligendi. Adipisci distinctio voluptas perspiciatis velit error ea consequatur vitae consectetur. Et est aliquid iure ab numquam voluptatibus repellendus voluptatem hic. Deleniti reprehenderit deserunt voluptates eum et veniam quia mollitia autem! Cupiditate impedit molestias, nemo eos nam voluptatem aspernatur expedita est. Quod ducimus error eos, nesciunt aliquam omnis nemo quidem quis! Sit sequi impedit omnis, quod ut nihil enim error perspiciatis. Porro iste consequatur in cupiditate veritatis perspiciatis nobis sed dolores. Ratione ut, et consequatur voluptatem excepturi nulla quis necessitatibus ut! Eum non molestias, beatae labore omnis optio et autem voluptatem.\r\nVoluptatem non delectus consequatur a porro possimus dolore architecto dolorem.', 'Laborum consequatur qui. Sit ab maxime. Quia in incidunt! Error unde magni? Qui enim expedita. Sint et error! Totam voluptatem illum. Ut quibusdam ullam.\r\nRem mollitia sit. Harum sapiente sunt! Dicta?', 'Porro qui ex qui, sint voluptatem incidunt sit quia quo. Deserunt recusandae dolores et eos voluptates omnis mollitia ea accusantium. Debitis blanditiis dolorum doloremque est enim et eos explicabo quasi. Sapiente qui, a expedita necessitatibus qui temporibus sequi inventore dolorem. Facere alias ex omnis qui non dolor et veniam similique. Qui tempore, optio aperiam modi autem cumque dolores exercitationem sunt. Ut aperiam, modi adipisci consequuntur voluptatem commodi libero inventore nihil! Saepe quae velit et est, nulla eum et similique laudantium. Obcaecati sunt unde quia, ex dolorem quia et ipsam et!\r\nVoluptas dicta laborum qui dolor et, consectetur qui maxime ea; unde qui explicabo, ut quisquam quo sed consequatur error obcaecati. Ipsum molestias voluptatem ut in, ea iure excepturi perspiciatis quia. Eius totam ea aliquam quaerat quis velit debitis similique aspernatur. Molestiae nisi rerum est explicabo possimus aut culpa sed repellat. Mollitia est delectus voluptatem incidunt quasi aperiam omnis ex reprehenderit. Sit et natus praesentium aut ut autem vitae voluptatem fugiat.\r\nArchitecto accusamus doloremque quis quas dolor nisi est iste quos. Fuga excepturi quisquam, sed a enim quia iste ut sint...', '', 'Beatae est id atque; tempora iusto sit quia impedit omnis nobis. Sit fugit culpa ad, voluptas ut eaque nisi cum repellat. Consequatur qui itaque quis? Nihil fugiat quod non; qui maxime quidem veniam sed.', '2022-04-17 01:18:09', NULL, '2022-05-10 20:14:26', NULL),
('6b47b37f-3123-3ce7-14cf-9712082ff6cb', 'BC-005', NULL, 'My Favorite Easy Black Pizza Toast Recipe', 'Ipsa et est et qui dolor laborum iste.', 'Tempora deserunt asperiores; voluptatem error architecto. Qui sit qui. Consectetur delectus veritatis! Perspiciatis voluptatem in; quaerat iusto eligendi. Ut inventore quia. Consequatur perspiciatis.\r\n', 'Aliquid ea repudiandae officiis delectus enim est et numquam cumque.\r\nSit corporis explicabo quam aliquam nobis ad laudantium aliquid exercitationem. Est possimus quia ducimus est aut, rerum ut iste et? Qui voluptas, adipisci ut maiores distinctio et ut sed velit. Deserunt omnis, totam tempore magni optio et saepe perferendis reiciendis.', 'Sit suscipit mollitia assumenda voluptas vitae quos. Aspernatur quis eum aut nesciunt ratione. Non aut natus, ut rem placeat unde rem sit est! Perferendis explicabo repellat aut officiis provident ipsam.', 'Harum quia consequuntur, aut hic commodi ut sit doloribus dicta.\r\nVoluptas maxime sit doloremque dolorem rem magni magnam voluptas quidem.', 'Autem et harum veniam iste consequuntur. Voluptatem quaerat reprehenderit id consequatur rem fugit. Dolores placeat aliquid, eum beatae est qui rem qui iste! Magni sed ipsum ea ullam sit autem.', 'Ex natus cupiditate laboriosam. Suscipit fugiat aut ipsam et maiores. Deleniti a recusandae totam minima. Ut eveniet alias! Officiis eligendi autem minima ducimus iste maxime qui natus consectetur.', '2022-04-12 00:09:27', NULL, '2022-04-13 23:11:48', NULL);

-- 
-- Dumping data for table answer
--
-- Table fast_food_management.answer does not contain any data (it is empty)

-- 
-- Dumping data for table accesslog
--
INSERT INTO accesslog VALUES
('1e841c6b-f9c3-11ec-bd60-98e7430c3bdb', '756e18ee-7f9c-33f8-0878-3ccbef6739df', '+ Mã giảm giá: DC-005\n+ Tiêu đề: Giảm giá cuối tuần\n+ Loại giảm giá: 0\n+ % giảm giá: 10\n+ Giảm tối đa: 50000\n+ Ngày bắt đầu: 24/6/2022 10:00:00 AM\n+ Ngày kết thúc: 28/7/2022 5:00:00 PM', 'Mã giảm giá', '2022-07-02 11:54:56', NULL, '2022-07-02 11:54:56', NULL, 'Thêm mới', NULL),
('8b06a61e-f7ce-11ec-bd60-98e7430c3bdb', '756e18ee-7f9c-33f8-0878-3ccbef6739df', '+ Link hình ảnh: Từ <https://pathstorage1.blob.core.windows.net/files/colddrink.png> thành <>\n+ Mô tả: Từ <Ea fuga neque et aut. Error dolores! Sed deleniti. Rerum odio.> thành <Ea fuga neque et aut. Error dolores! Sed deleniti. Rerum odio. This is Cold Drinks>', 'Danh mục', '2022-06-30 00:11:40', NULL, '2022-06-30 00:11:40', NULL, 'Cập nhật', 'ptduyen'),
('ce93c693-f7cf-11ec-bd60-98e7430c3bdb', '756e18ee-7f9c-33f8-0878-3ccbef6739df', '+ Tên danh mục: Từ <Cold Drinks> thành <Cold Drink>\n+ Link hình ảnh: Từ <> thành <https://pathstorage1.blob.core.windows.net/files/5-1.png>\n+ Mô tả: Từ<Ea fuga neque et aut. Error dolores! Sed deleniti. Rerum odio. This is Cold Drinks> thành <Ea fuga neque et aut. Error dolores! Sed deleniti. Rerum odio. This is Cold Drink>', 'Danh mục', '2022-06-30 00:20:43', NULL, '2022-06-30 00:20:43', NULL, 'Cập nhật', 'ptduyen');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;